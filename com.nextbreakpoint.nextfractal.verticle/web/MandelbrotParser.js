// Generated from Mandelbrot.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var MandelbrotListener = require('./MandelbrotListener').MandelbrotListener;
var grammarFileName = "Mandelbrot.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003T\u0295\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0003\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003a\n\u0003\f\u0003\u000e\u0003",
    "d\u000b\u0003\u0003\u0003\u0005\u0003g\n\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003k\n\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004u\n\u0004",
    "\f\u0004\u000e\u0004x\u000b\u0004\u0003\u0004\u0005\u0004{\n\u0004\u0003",
    "\u0004\u0007\u0004~\n\u0004\f\u0004\u000e\u0004\u0081\u000b\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u00a3\n\b\f\b\u000e\b\u00a6\u000b\b\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00c4\n\t",
    "\u0003\n\u0007\n\u00c7\n\n\f\n\u000e\n\u00ca\u000b\n\u0003\u000b\u0007",
    "\u000b\u00cd\n\u000b\f\u000b\u000e\u000b\u00d0\u000b\u000b\u0003\f\u0007",
    "\f\u00d3\n\f\f\f\u000e\f\u00d6\u000b\f\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0005\r\u00dc\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0007\r\u00e4\n\r\f\r\u000e\r\u00e7\u000b\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0007\r\u00ed\n\r\f\r\u000e\r\u00f0\u000b\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u00fa\n\r\f",
    "\r\u000e\r\u00fd\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0109\n\r\u0005\r\u010b\n",
    "\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u0112\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0007\u000f\u011a\n\u000f\f\u000f\u000e\u000f",
    "\u011d\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u012e",
    "\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0133\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0138\n\u0011\f\u0011",
    "\u000e\u0011\u013b\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u0140\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012",
    "\u0145\n\u0012\f\u0012\u000e\u0012\u0148\u000b\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u014d\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u0152\n\u0013\f\u0013\u000e\u0013\u0155\u000b",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u015a\n\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0172\n",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u017c\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u0184\n\u0016\f\u0016\u000e\u0016\u0187\u000b\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u0192\n\u0017\u0003\u0017\u0005\u0017",
    "\u0195\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u019c\n\u0017\u0003\u0017\u0007\u0017\u019f\n\u0017",
    "\f\u0017\u000e\u0017\u01a2\u000b\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u01a7\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u01ac\n\u0018\f\u0018\u000e\u0018\u01af\u000b\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007",
    "\u0019\u01b7\n\u0019\f\u0019\u000e\u0019\u01ba\u000b\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u01d5\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u01da\n\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0005\u001d",
    "\u01df\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u01e4",
    "\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01e8\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u01ed\n\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01f3\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01ff\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u020b\n\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u0212\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u0219\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u022b\n\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0006\u001f\u0231\n\u001f\r\u001f\u000e\u001f\u0232",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u024b\n \u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003\"\u0007\"\u0253\n\"\f\"\u000e\"\u0256\u000b\"\u0003#\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u026b\n$\f",
    "$\u000e$\u026e\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0005%\u0284\n%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0291\n&\u0003\'",
    "\u0003\'\u0003\'\u0002\u000b\u001c \"$*,.0F(\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJL\u0002\t\u0004\u0002\u000b\u000b\u000e\u0012\u0003\u0002",
    "\u001f#\u0003\u0002$)\u0003\u0002*2\u0003\u000238\u0003\u0002LM\u0003",
    "\u0002\u0015\u0017\u02cb\u0002N\u0003\u0002\u0002\u0002\u0004U\u0003",
    "\u0002\u0002\u0002\u0006n\u0003\u0002\u0002\u0002\b\u0084\u0003\u0002",
    "\u0002\u0002\n\u0089\u0003\u0002\u0002\u0002\f\u0096\u0003\u0002\u0002",
    "\u0002\u000e\u009b\u0003\u0002\u0002\u0002\u0010\u00c3\u0003\u0002\u0002",
    "\u0002\u0012\u00c8\u0003\u0002\u0002\u0002\u0014\u00ce\u0003\u0002\u0002",
    "\u0002\u0016\u00d4\u0003\u0002\u0002\u0002\u0018\u010a\u0003\u0002\u0002",
    "\u0002\u001a\u0111\u0003\u0002\u0002\u0002\u001c\u0113\u0003\u0002\u0002",
    "\u0002\u001e\u012d\u0003\u0002\u0002\u0002 \u0132\u0003\u0002\u0002",
    "\u0002\"\u013f\u0003\u0002\u0002\u0002$\u014c\u0003\u0002\u0002\u0002",
    "&\u0159\u0003\u0002\u0002\u0002(\u0171\u0003\u0002\u0002\u0002*\u017b",
    "\u0003\u0002\u0002\u0002,\u0194\u0003\u0002\u0002\u0002.\u01a6\u0003",
    "\u0002\u0002\u00020\u01b0\u0003\u0002\u0002\u00022\u01d4\u0003\u0002",
    "\u0002\u00024\u01d9\u0003\u0002\u0002\u00026\u01db\u0003\u0002\u0002",
    "\u00028\u01e3\u0003\u0002\u0002\u0002:\u022a\u0003\u0002\u0002\u0002",
    "<\u022c\u0003\u0002\u0002\u0002>\u024a\u0003\u0002\u0002\u0002@\u024c",
    "\u0003\u0002\u0002\u0002B\u0254\u0003\u0002\u0002\u0002D\u0257\u0003",
    "\u0002\u0002\u0002F\u0262\u0003\u0002\u0002\u0002H\u0283\u0003\u0002",
    "\u0002\u0002J\u0290\u0003\u0002\u0002\u0002L\u0292\u0003\u0002\u0002",
    "\u0002NO\u0007<\u0002\u0002OP\u0007\u0003\u0002\u0002PQ\u0005\u0004",
    "\u0003\u0002QR\u0005\u0006\u0004\u0002RS\u0007\u0004\u0002\u0002ST\u0005",
    "L\'\u0002T\u0003\u0003\u0002\u0002\u0002UV\u0007=\u0002\u0002VW\u0007",
    "\u0005\u0002\u0002WX\u0005:\u001e\u0002XY\u0007\u0006\u0002\u0002YZ",
    "\u0005:\u001e\u0002Z[\u0007\u0007\u0002\u0002[\\\u0007\u0005\u0002\u0002",
    "\\]\u0005\u001c\u000f\u0002]^\u0007\u0007\u0002\u0002^b\u0007\u0003",
    "\u0002\u0002_a\u0005\u000e\b\u0002`_\u0003\u0002\u0002\u0002ad\u0003",
    "\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002bc\u0003\u0002\u0002\u0002",
    "cf\u0003\u0002\u0002\u0002db\u0003\u0002\u0002\u0002eg\u0005\b\u0005",
    "\u0002fe\u0003\u0002\u0002\u0002fg\u0003\u0002\u0002\u0002gh\u0003\u0002",
    "\u0002\u0002hj\u0005\n\u0006\u0002ik\u0005\f\u0007\u0002ji\u0003\u0002",
    "\u0002\u0002jk\u0003\u0002\u0002\u0002kl\u0003\u0002\u0002\u0002lm\u0007",
    "\u0004\u0002\u0002m\u0005\u0003\u0002\u0002\u0002no\u0007G\u0002\u0002",
    "op\u0007\u0005\u0002\u0002pq\u0005J&\u0002qr\u0007\u0007\u0002\u0002",
    "rv\u0007\u0003\u0002\u0002su\u0005<\u001f\u0002ts\u0003\u0002\u0002",
    "\u0002ux\u0003\u0002\u0002\u0002vt\u0003\u0002\u0002\u0002vw\u0003\u0002",
    "\u0002\u0002wz\u0003\u0002\u0002\u0002xv\u0003\u0002\u0002\u0002y{\u0005",
    "@!\u0002zy\u0003\u0002\u0002\u0002z{\u0003\u0002\u0002\u0002{\u007f",
    "\u0003\u0002\u0002\u0002|~\u0005D#\u0002}|\u0003\u0002\u0002\u0002~",
    "\u0081\u0003\u0002\u0002\u0002\u007f}\u0003\u0002\u0002\u0002\u007f",
    "\u0080\u0003\u0002\u0002\u0002\u0080\u0082\u0003\u0002\u0002\u0002\u0081",
    "\u007f\u0003\u0002\u0002\u0002\u0082\u0083\u0007\u0004\u0002\u0002\u0083",
    "\u0007\u0003\u0002\u0002\u0002\u0084\u0085\u0007?\u0002\u0002\u0085",
    "\u0086\u0007\u0003\u0002\u0002\u0086\u0087\u0005\u0012\n\u0002\u0087",
    "\u0088\u0007\u0004\u0002\u0002\u0088\t\u0003\u0002\u0002\u0002\u0089",
    "\u008a\u0007@\u0002\u0002\u008a\u008b\u0007\u0005\u0002\u0002\u008b",
    "\u008c\u0007M\u0002\u0002\u008c\u008d\u0007\u0006\u0002\u0002\u008d",
    "\u008e\u0007M\u0002\u0002\u008e\u008f\u0007\u0007\u0002\u0002\u008f",
    "\u0090\u0007\b\u0002\u0002\u0090\u0091\u0005 \u0011\u0002\u0091\u0092",
    "\u0007\t\u0002\u0002\u0092\u0093\u0007\u0003\u0002\u0002\u0093\u0094",
    "\u0005\u0014\u000b\u0002\u0094\u0095\u0007\u0004\u0002\u0002\u0095\u000b",
    "\u0003\u0002\u0002\u0002\u0096\u0097\u0007A\u0002\u0002\u0097\u0098",
    "\u0007\u0003\u0002\u0002\u0098\u0099\u0005\u0016\f\u0002\u0099\u009a",
    "\u0007\u0004\u0002\u0002\u009a\r\u0003\u0002\u0002\u0002\u009b\u009c",
    "\u0007>\u0002\u0002\u009c\u009d\u0007R\u0002\u0002\u009d\u009e\u0007",
    "\u0005\u0002\u0002\u009e\u009f\u0005:\u001e\u0002\u009f\u00a0\u0007",
    "\u0007\u0002\u0002\u00a0\u00a4\u0007\u0003\u0002\u0002\u00a1\u00a3\u0005",
    "\u0010\t\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a6\u0003",
    "\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a4\u00a5\u0003",
    "\u0002\u0002\u0002\u00a5\u00a7\u0003\u0002\u0002\u0002\u00a6\u00a4\u0003",
    "\u0002\u0002\u0002\u00a7\u00a8\u0007\u0004\u0002\u0002\u00a8\u000f\u0003",
    "\u0002\u0002\u0002\u00a9\u00aa\u0007N\u0002\u0002\u00aa\u00c4\u0007",
    "\n\u0002\u0002\u00ab\u00ac\u0007O\u0002\u0002\u00ac\u00ad\u0007\b\u0002",
    "\u0002\u00ad\u00ae\u0005:\u001e\u0002\u00ae\u00af\u0007\t\u0002\u0002",
    "\u00af\u00b0\u0007\n\u0002\u0002\u00b0\u00c4\u0003\u0002\u0002\u0002",
    "\u00b1\u00b2\u0007P\u0002\u0002\u00b2\u00b3\u0007\b\u0002\u0002\u00b3",
    "\u00b4\u0005:\u001e\u0002\u00b4\u00b5\u0007\u0006\u0002\u0002\u00b5",
    "\u00b6\u0005:\u001e\u0002\u00b6\u00b7\u0007\t\u0002\u0002\u00b7\u00b8",
    "\u0007\n\u0002\u0002\u00b8\u00c4\u0003\u0002\u0002\u0002\u00b9\u00ba",
    "\u0007Q\u0002\u0002\u00ba\u00bb\u0007\b\u0002\u0002\u00bb\u00bc\u0005",
    ":\u001e\u0002\u00bc\u00bd\u0007\u0006\u0002\u0002\u00bd\u00be\u0005",
    ":\u001e\u0002\u00be\u00bf\u0007\u0006\u0002\u0002\u00bf\u00c0\u0005",
    ":\u001e\u0002\u00c0\u00c1\u0007\t\u0002\u0002\u00c1\u00c2\u0007\n\u0002",
    "\u0002\u00c2\u00c4\u0003\u0002\u0002\u0002\u00c3\u00a9\u0003\u0002\u0002",
    "\u0002\u00c3\u00ab\u0003\u0002\u0002\u0002\u00c3\u00b1\u0003\u0002\u0002",
    "\u0002\u00c3\u00b9\u0003\u0002\u0002\u0002\u00c4\u0011\u0003\u0002\u0002",
    "\u0002\u00c5\u00c7\u0005\u0018\r\u0002\u00c6\u00c5\u0003\u0002\u0002",
    "\u0002\u00c7\u00ca\u0003\u0002\u0002\u0002\u00c8\u00c6\u0003\u0002\u0002",
    "\u0002\u00c8\u00c9\u0003\u0002\u0002\u0002\u00c9\u0013\u0003\u0002\u0002",
    "\u0002\u00ca\u00c8\u0003\u0002\u0002\u0002\u00cb\u00cd\u0005\u0018\r",
    "\u0002\u00cc\u00cb\u0003\u0002\u0002\u0002\u00cd\u00d0\u0003\u0002\u0002",
    "\u0002\u00ce\u00cc\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003\u0002\u0002",
    "\u0002\u00cf\u0015\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003\u0002\u0002",
    "\u0002\u00d1\u00d3\u0005\u0018\r\u0002\u00d2\u00d1\u0003\u0002\u0002",
    "\u0002\u00d3\u00d6\u0003\u0002\u0002\u0002\u00d4\u00d2\u0003\u0002\u0002",
    "\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002\u00d5\u0017\u0003\u0002\u0002",
    "\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d7\u00d8\u0007R\u0002",
    "\u0002\u00d8\u00d9\u0007\u000b\u0002\u0002\u00d9\u00db\u0005*\u0016",
    "\u0002\u00da\u00dc\u0007\n\u0002\u0002\u00db\u00da\u0003\u0002\u0002",
    "\u0002\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u010b\u0003\u0002\u0002",
    "\u0002\u00dd\u00de\u0007C\u0002\u0002\u00de\u00df\u0007\b\u0002\u0002",
    "\u00df\u00e0\u0005 \u0011\u0002\u00e0\u00e1\u0007\t\u0002\u0002\u00e1",
    "\u00e5\u0007\u0003\u0002\u0002\u00e2\u00e4\u0005\u0018\r\u0002\u00e3",
    "\u00e2\u0003\u0002\u0002\u0002\u00e4\u00e7\u0003\u0002\u0002\u0002\u00e5",
    "\u00e3\u0003\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6",
    "\u00e8\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e8",
    "\u00e9\u0007\u0004\u0002\u0002\u00e9\u00ea\u0007D\u0002\u0002\u00ea",
    "\u00ee\u0007\u0003\u0002\u0002\u00eb\u00ed\u0005\u0018\r\u0002\u00ec",
    "\u00eb\u0003\u0002\u0002\u0002\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee",
    "\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef",
    "\u00f1\u0003\u0002\u0002\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1",
    "\u00f2\u0007\u0004\u0002\u0002\u00f2\u010b\u0003\u0002\u0002\u0002\u00f3",
    "\u00f4\u0007C\u0002\u0002\u00f4\u00f5\u0007\b\u0002\u0002\u00f5\u00f6",
    "\u0005 \u0011\u0002\u00f6\u00f7\u0007\t\u0002\u0002\u00f7\u00fb\u0007",
    "\u0003\u0002\u0002\u00f8\u00fa\u0005\u0018\r\u0002\u00f9\u00f8\u0003",
    "\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003",
    "\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fe\u0003",
    "\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff\u0007",
    "\u0004\u0002\u0002\u00ff\u010b\u0003\u0002\u0002\u0002\u0100\u0101\u0007",
    "C\u0002\u0002\u0101\u0102\u0007\b\u0002\u0002\u0102\u0103\u0005 \u0011",
    "\u0002\u0103\u0104\u0007\t\u0002\u0002\u0104\u0105\u0005\u0018\r\u0002",
    "\u0105\u010b\u0003\u0002\u0002\u0002\u0106\u0108\u0007E\u0002\u0002",
    "\u0107\u0109\u0007\n\u0002\u0002\u0108\u0107\u0003\u0002\u0002\u0002",
    "\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002",
    "\u010a\u00d7\u0003\u0002\u0002\u0002\u010a\u00dd\u0003\u0002\u0002\u0002",
    "\u010a\u00f3\u0003\u0002\u0002\u0002\u010a\u0100\u0003\u0002\u0002\u0002",
    "\u010a\u0106\u0003\u0002\u0002\u0002\u010b\u0019\u0003\u0002\u0002\u0002",
    "\u010c\u010d\u0007\f\u0002\u0002\u010d\u0112\u0007R\u0002\u0002\u010e",
    "\u010f\u0007\r\u0002\u0002\u010f\u0112\u0007R\u0002\u0002\u0110\u0112",
    "\u0007R\u0002\u0002\u0111\u010c\u0003\u0002\u0002\u0002\u0111\u010e",
    "\u0003\u0002\u0002\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0112\u001b",
    "\u0003\u0002\u0002\u0002\u0113\u0114\b\u000f\u0001\u0002\u0114\u0115",
    "\u0005\u001a\u000e\u0002\u0115\u011b\u0003\u0002\u0002\u0002\u0116\u0117",
    "\f\u0003\u0002\u0002\u0117\u0118\u0007\u0006\u0002\u0002\u0118\u011a",
    "\u0005\u001a\u000e\u0002\u0119\u0116\u0003\u0002\u0002\u0002\u011a\u011d",
    "\u0003\u0002\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0003\u0002\u0002\u0002\u011c\u001d\u0003\u0002\u0002\u0002\u011d\u011b",
    "\u0003\u0002\u0002\u0002\u011e\u011f\u0005*\u0016\u0002\u011f\u0120",
    "\t\u0002\u0002\u0002\u0120\u0121\u0005*\u0016\u0002\u0121\u012e\u0003",
    "\u0002\u0002\u0002\u0122\u0123\u0007R\u0002\u0002\u0123\u0124\u0007",
    "\u0013\u0002\u0002\u0124\u012e\u0005*\u0016\u0002\u0125\u0126\u0007",
    "R\u0002\u0002\u0126\u0127\u0007\u0014\u0002\u0002\u0127\u012e\u0005",
    "*\u0016\u0002\u0128\u012e\u0007F\u0002\u0002\u0129\u012a\u0007\b\u0002",
    "\u0002\u012a\u012b\u0005 \u0011\u0002\u012b\u012c\u0007\t\u0002\u0002",
    "\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u011e\u0003\u0002\u0002\u0002",
    "\u012d\u0122\u0003\u0002\u0002\u0002\u012d\u0125\u0003\u0002\u0002\u0002",
    "\u012d\u0128\u0003\u0002\u0002\u0002\u012d\u0129\u0003\u0002\u0002\u0002",
    "\u012e\u001f\u0003\u0002\u0002\u0002\u012f\u0130\b\u0011\u0001\u0002",
    "\u0130\u0133\u0005\u001e\u0010\u0002\u0131\u0133\u0005\"\u0012\u0002",
    "\u0132\u012f\u0003\u0002\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002",
    "\u0133\u0139\u0003\u0002\u0002\u0002\u0134\u0135\f\u0003\u0002\u0002",
    "\u0135\u0136\u0007\u0015\u0002\u0002\u0136\u0138\u0005\"\u0012\u0002",
    "\u0137\u0134\u0003\u0002\u0002\u0002\u0138\u013b\u0003\u0002\u0002\u0002",
    "\u0139\u0137\u0003\u0002\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002",
    "\u013a!\u0003\u0002\u0002\u0002\u013b\u0139\u0003\u0002\u0002\u0002",
    "\u013c\u013d\b\u0012\u0001\u0002\u013d\u0140\u0005\u001e\u0010\u0002",
    "\u013e\u0140\u0005$\u0013\u0002\u013f\u013c\u0003\u0002\u0002\u0002",
    "\u013f\u013e\u0003\u0002\u0002\u0002\u0140\u0146\u0003\u0002\u0002\u0002",
    "\u0141\u0142\f\u0003\u0002\u0002\u0142\u0143\u0007\u0016\u0002\u0002",
    "\u0143\u0145\u0005$\u0013\u0002\u0144\u0141\u0003\u0002\u0002\u0002",
    "\u0145\u0148\u0003\u0002\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u0003\u0002\u0002\u0002\u0147#\u0003\u0002\u0002\u0002",
    "\u0148\u0146\u0003\u0002\u0002\u0002\u0149\u014a\b\u0013\u0001\u0002",
    "\u014a\u014d\u0005\u001e\u0010\u0002\u014b\u014d\u0005&\u0014\u0002",
    "\u014c\u0149\u0003\u0002\u0002\u0002\u014c\u014b\u0003\u0002\u0002\u0002",
    "\u014d\u0153\u0003\u0002\u0002\u0002\u014e\u014f\f\u0003\u0002\u0002",
    "\u014f\u0150\u0007\u0017\u0002\u0002\u0150\u0152\u0005&\u0014\u0002",
    "\u0151\u014e\u0003\u0002\u0002\u0002\u0152\u0155\u0003\u0002\u0002\u0002",
    "\u0153\u0151\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002",
    "\u0154%\u0003\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002",
    "\u0156\u015a\u0005\u001e\u0010\u0002\u0157\u0158\u0007\u0018\u0002\u0002",
    "\u0158\u015a\u0005&\u0014\u0002\u0159\u0156\u0003\u0002\u0002\u0002",
    "\u0159\u0157\u0003\u0002\u0002\u0002\u015a\'\u0003\u0002\u0002\u0002",
    "\u015b\u0172\u00054\u001b\u0002\u015c\u0172\u00056\u001c\u0002\u015d",
    "\u0172\u00058\u001d\u0002\u015e\u0172\u00052\u001a\u0002\u015f\u0160",
    "\u0007\b\u0002\u0002\u0160\u0161\u0005*\u0016\u0002\u0161\u0162\u0007",
    "\t\u0002\u0002\u0162\u0172\u0003\u0002\u0002\u0002\u0163\u0164\u0007",
    "\u0015\u0002\u0002\u0164\u0165\u0005*\u0016\u0002\u0165\u0166\u0007",
    "\u0015\u0002\u0002\u0166\u0172\u0003\u0002\u0002\u0002\u0167\u0168\u0007",
    "\u000e\u0002\u0002\u0168\u0169\u0005*\u0016\u0002\u0169\u016a\u0007",
    "\u000f\u0002\u0002\u016a\u0172\u0003\u0002\u0002\u0002\u016b\u016c\u0007",
    "\u000e\u0002\u0002\u016c\u016d\u0005*\u0016\u0002\u016d\u016e\u0007",
    "\u0006\u0002\u0002\u016e\u016f\u0005*\u0016\u0002\u016f\u0170\u0007",
    "\u000f\u0002\u0002\u0170\u0172\u0003\u0002\u0002\u0002\u0171\u015b\u0003",
    "\u0002\u0002\u0002\u0171\u015c\u0003\u0002\u0002\u0002\u0171\u015d\u0003",
    "\u0002\u0002\u0002\u0171\u015e\u0003\u0002\u0002\u0002\u0171\u015f\u0003",
    "\u0002\u0002\u0002\u0171\u0163\u0003\u0002\u0002\u0002\u0171\u0167\u0003",
    "\u0002\u0002\u0002\u0171\u016b\u0003\u0002\u0002\u0002\u0172)\u0003",
    "\u0002\u0002\u0002\u0173\u0174\b\u0016\u0001\u0002\u0174\u017c\u0005",
    "(\u0015\u0002\u0175\u017c\u0005:\u001e\u0002\u0176\u017c\u0005,\u0017",
    "\u0002\u0177\u0178\u0005,\u0017\u0002\u0178\u0179\u0007\u0019\u0002",
    "\u0002\u0179\u017a\u0005*\u0016\u0004\u017a\u017c\u0003\u0002\u0002",
    "\u0002\u017b\u0173\u0003\u0002\u0002\u0002\u017b\u0175\u0003\u0002\u0002",
    "\u0002\u017b\u0176\u0003\u0002\u0002\u0002\u017b\u0177\u0003\u0002\u0002",
    "\u0002\u017c\u0185\u0003\u0002\u0002\u0002\u017d\u017e\f\u0005\u0002",
    "\u0002\u017e\u017f\u0007\u0019\u0002\u0002\u017f\u0184\u0005,\u0017",
    "\u0002\u0180\u0181\f\u0003\u0002\u0002\u0181\u0182\u0007\u001a\u0002",
    "\u0002\u0182\u0184\u0005,\u0017\u0002\u0183\u017d\u0003\u0002\u0002",
    "\u0002\u0183\u0180\u0003\u0002\u0002\u0002\u0184\u0187\u0003\u0002\u0002",
    "\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002",
    "\u0002\u0186+\u0003\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002",
    "\u0002\u0188\u0189\b\u0017\u0001\u0002\u0189\u0195\u0005(\u0015\u0002",
    "\u018a\u0195\u0005.\u0018\u0002\u018b\u018c\u0007\u001a\u0002\u0002",
    "\u018c\u0195\u0005,\u0017\u0006\u018d\u018e\u0007\u0019\u0002\u0002",
    "\u018e\u0195\u0005,\u0017\u0005\u018f\u0191\u0007\u001c\u0002\u0002",
    "\u0190\u0192\u0007\u001b\u0002\u0002\u0191\u0190\u0003\u0002\u0002\u0002",
    "\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002",
    "\u0193\u0195\u0005,\u0017\u0004\u0194\u0188\u0003\u0002\u0002\u0002",
    "\u0194\u018a\u0003\u0002\u0002\u0002\u0194\u018b\u0003\u0002\u0002\u0002",
    "\u0194\u018d\u0003\u0002\u0002\u0002\u0194\u018f\u0003\u0002\u0002\u0002",
    "\u0195\u01a0\u0003\u0002\u0002\u0002\u0196\u0197\f\u0007\u0002\u0002",
    "\u0197\u0198\u0007\u001b\u0002\u0002\u0198\u019f\u0005,\u0017\b\u0199",
    "\u019b\f\u0003\u0002\u0002\u019a\u019c\u0007\u001b\u0002\u0002\u019b",
    "\u019a\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c",
    "\u019d\u0003\u0002\u0002\u0002\u019d\u019f\u0007\u001c\u0002\u0002\u019e",
    "\u0196\u0003\u0002\u0002\u0002\u019e\u0199\u0003\u0002\u0002\u0002\u019f",
    "\u01a2\u0003\u0002\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002\u01a0",
    "\u01a1\u0003\u0002\u0002\u0002\u01a1-\u0003\u0002\u0002\u0002\u01a2",
    "\u01a0\u0003\u0002\u0002\u0002\u01a3\u01a4\b\u0018\u0001\u0002\u01a4",
    "\u01a7\u0005(\u0015\u0002\u01a5\u01a7\u00050\u0019\u0002\u01a6\u01a3",
    "\u0003\u0002\u0002\u0002\u01a6\u01a5\u0003\u0002\u0002\u0002\u01a7\u01ad",
    "\u0003\u0002\u0002\u0002\u01a8\u01a9\f\u0003\u0002\u0002\u01a9\u01aa",
    "\u0007\u001d\u0002\u0002\u01aa\u01ac\u0005.\u0018\u0004\u01ab\u01a8",
    "\u0003\u0002\u0002\u0002\u01ac\u01af\u0003\u0002\u0002\u0002\u01ad\u01ab",
    "\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae/",
    "\u0003\u0002\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01b0\u01b1",
    "\b\u0019\u0001\u0002\u01b1\u01b2\u0005(\u0015\u0002\u01b2\u01b8\u0003",
    "\u0002\u0002\u0002\u01b3\u01b4\f\u0003\u0002\u0002\u01b4\u01b5\u0007",
    "\u0016\u0002\u0002\u01b5\u01b7\u00050\u0019\u0004\u01b6\u01b3\u0003",
    "\u0002\u0002\u0002\u01b7\u01ba\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b91\u0003",
    "\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007",
    "\u001e\u0002\u0002\u01bc\u01bd\u0007\b\u0002\u0002\u01bd\u01d5\u0007",
    "\t\u0002\u0002\u01be\u01bf\t\u0003\u0002\u0002\u01bf\u01c0\u0007\b\u0002",
    "\u0002\u01c0\u01c1\u0005*\u0016\u0002\u01c1\u01c2\u0007\t\u0002\u0002",
    "\u01c2\u01d5\u0003\u0002\u0002\u0002\u01c3\u01c4\t\u0004\u0002\u0002",
    "\u01c4\u01c5\u0007\b\u0002\u0002\u01c5\u01c6\u0005*\u0016\u0002\u01c6",
    "\u01c7\u0007\t\u0002\u0002\u01c7\u01d5\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\t\u0005\u0002\u0002\u01c9\u01ca\u0007\b\u0002\u0002\u01ca\u01cb",
    "\u0005*\u0016\u0002\u01cb\u01cc\u0007\t\u0002\u0002\u01cc\u01d5\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\t\u0006\u0002\u0002\u01ce\u01cf\u0007",
    "\b\u0002\u0002\u01cf\u01d0\u0005*\u0016\u0002\u01d0\u01d1\u0007\u0006",
    "\u0002\u0002\u01d1\u01d2\u0005*\u0016\u0002\u01d2\u01d3\u0007\t\u0002",
    "\u0002\u01d3\u01d5\u0003\u0002\u0002\u0002\u01d4\u01bb\u0003\u0002\u0002",
    "\u0002\u01d4\u01be\u0003\u0002\u0002\u0002\u01d4\u01c3\u0003\u0002\u0002",
    "\u0002\u01d4\u01c8\u0003\u0002\u0002\u0002\u01d4\u01cd\u0003\u0002\u0002",
    "\u0002\u01d53\u0003\u0002\u0002\u0002\u01d6\u01da\u00079\u0002\u0002",
    "\u01d7\u01da\u0007:\u0002\u0002\u01d8\u01da\u0007;\u0002\u0002\u01d9",
    "\u01d6\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9",
    "\u01d8\u0003\u0002\u0002\u0002\u01da5\u0003\u0002\u0002\u0002\u01db",
    "\u01dc\u0007R\u0002\u0002\u01dc7\u0003\u0002\u0002\u0002\u01dd\u01df",
    "\u0007\u0019\u0002\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01de\u01df",
    "\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e4",
    "\t\u0007\u0002\u0002\u01e1\u01e2\u0007\u001a\u0002\u0002\u01e2\u01e4",
    "\t\u0007\u0002\u0002\u01e3\u01de\u0003\u0002\u0002\u0002\u01e3\u01e1",
    "\u0003\u0002\u0002\u0002\u01e49\u0003\u0002\u0002\u0002\u01e5\u01e7",
    "\u0007\u000e\u0002\u0002\u01e6\u01e8\u0007\u0019\u0002\u0002\u01e7\u01e6",
    "\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01e9",
    "\u0003\u0002\u0002\u0002\u01e9\u01ea\t\u0007\u0002\u0002\u01ea\u01ec",
    "\u0007\u0006\u0002\u0002\u01eb\u01ed\u0007\u0019\u0002\u0002\u01ec\u01eb",
    "\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee",
    "\u0003\u0002\u0002\u0002\u01ee\u01ef\t\u0007\u0002\u0002\u01ef\u022b",
    "\u0007\u000f\u0002\u0002\u01f0\u01f2\u0007\u000e\u0002\u0002\u01f1\u01f3",
    "\u0007\u0019\u0002\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f2\u01f3",
    "\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f5",
    "\t\u0007\u0002\u0002\u01f5\u01f6\u0007\u0006\u0002\u0002\u01f6\u01f7",
    "\u0007\u001a\u0002\u0002\u01f7\u01f8\t\u0007\u0002\u0002\u01f8\u022b",
    "\u0007\u000f\u0002\u0002\u01f9\u01fa\u0007\u000e\u0002\u0002\u01fa\u01fb",
    "\u0007\u001a\u0002\u0002\u01fb\u01fc\t\u0007\u0002\u0002\u01fc\u01fe",
    "\u0007\u0006\u0002\u0002\u01fd\u01ff\u0007\u0019\u0002\u0002\u01fe\u01fd",
    "\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0200",
    "\u0003\u0002\u0002\u0002\u0200\u0201\t\u0007\u0002\u0002\u0201\u022b",
    "\u0007\u000f\u0002\u0002\u0202\u0203\u0007\u000e\u0002\u0002\u0203\u0204",
    "\u0007\u001a\u0002\u0002\u0204\u0205\t\u0007\u0002\u0002\u0205\u0206",
    "\u0007\u0006\u0002\u0002\u0206\u0207\u0007\u001a\u0002\u0002\u0207\u0208",
    "\t\u0007\u0002\u0002\u0208\u022b\u0007\u000f\u0002\u0002\u0209\u020b",
    "\u0007\u0019\u0002\u0002\u020a\u0209\u0003\u0002\u0002\u0002\u020a\u020b",
    "\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020d",
    "\t\u0007\u0002\u0002\u020d\u020e\u0007\u0019\u0002\u0002\u020e\u020f",
    "\t\u0007\u0002\u0002\u020f\u022b\u0007\u001c\u0002\u0002\u0210\u0212",
    "\u0007\u0019\u0002\u0002\u0211\u0210\u0003\u0002\u0002\u0002\u0211\u0212",
    "\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0214",
    "\t\u0007\u0002\u0002\u0214\u0215\u0007\u001a\u0002\u0002\u0215\u0216",
    "\t\u0007\u0002\u0002\u0216\u022b\u0007\u001c\u0002\u0002\u0217\u0219",
    "\u0007\u0019\u0002\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0218\u0219",
    "\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021b",
    "\t\u0007\u0002\u0002\u021b\u022b\u0007\u001c\u0002\u0002\u021c\u021d",
    "\u0007\u001a\u0002\u0002\u021d\u021e\t\u0007\u0002\u0002\u021e\u021f",
    "\u0007\u0019\u0002\u0002\u021f\u0220\t\u0007\u0002\u0002\u0220\u022b",
    "\u0007\u001c\u0002\u0002\u0221\u0222\u0007\u001a\u0002\u0002\u0222\u0223",
    "\t\u0007\u0002\u0002\u0223\u0224\u0007\u001a\u0002\u0002\u0224\u0225",
    "\t\u0007\u0002\u0002\u0225\u022b\u0007\u001c\u0002\u0002\u0226\u0227",
    "\u0007\u001a\u0002\u0002\u0227\u0228\t\u0007\u0002\u0002\u0228\u022b",
    "\u0007\u001c\u0002\u0002\u0229\u022b\u00058\u001d\u0002\u022a\u01e5",
    "\u0003\u0002\u0002\u0002\u022a\u01f0\u0003\u0002\u0002\u0002\u022a\u01f9",
    "\u0003\u0002\u0002\u0002\u022a\u0202\u0003\u0002\u0002\u0002\u022a\u020a",
    "\u0003\u0002\u0002\u0002\u022a\u0211\u0003\u0002\u0002\u0002\u022a\u0218",
    "\u0003\u0002\u0002\u0002\u022a\u021c\u0003\u0002\u0002\u0002\u022a\u0221",
    "\u0003\u0002\u0002\u0002\u022a\u0226\u0003\u0002\u0002\u0002\u022a\u0229",
    "\u0003\u0002\u0002\u0002\u022b;\u0003\u0002\u0002\u0002\u022c\u022d",
    "\u0007H\u0002\u0002\u022d\u022e\u0007R\u0002\u0002\u022e\u0230\u0007",
    "\u0003\u0002\u0002\u022f\u0231\u0005> \u0002\u0230\u022f\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002",
    "\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0007\u0004\u0002\u0002\u0235=\u0003\u0002",
    "\u0002\u0002\u0236\u0237\u0007\u0005\u0002\u0002\u0237\u0238\u0005J",
    "&\u0002\u0238\u0239\u0007\u000f\u0002\u0002\u0239\u023a\u0005J&\u0002",
    "\u023a\u023b\u0007\u0006\u0002\u0002\u023b\u023c\u0007M\u0002\u0002",
    "\u023c\u023d\u0007\u0006\u0002\u0002\u023d\u023e\u0005*\u0016\u0002",
    "\u023e\u023f\u0007\u0007\u0002\u0002\u023f\u0240\u0007\n\u0002\u0002",
    "\u0240\u024b\u0003\u0002\u0002\u0002\u0241\u0242\u0007\u0005\u0002\u0002",
    "\u0242\u0243\u0005J&\u0002\u0243\u0244\u0007\u000f\u0002\u0002\u0244",
    "\u0245\u0005J&\u0002\u0245\u0246\u0007\u0006\u0002\u0002\u0246\u0247",
    "\u0007M\u0002\u0002\u0247\u0248\u0007\u0007\u0002\u0002\u0248\u0249",
    "\u0007\n\u0002\u0002\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0236",
    "\u0003\u0002\u0002\u0002\u024a\u0241\u0003\u0002\u0002\u0002\u024b?",
    "\u0003\u0002\u0002\u0002\u024c\u024d\u0007B\u0002\u0002\u024d\u024e",
    "\u0007\u0003\u0002\u0002\u024e\u024f\u0005B\"\u0002\u024f\u0250\u0007",
    "\u0004\u0002\u0002\u0250A\u0003\u0002\u0002\u0002\u0251\u0253\u0005",
    "\u0018\r\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0253\u0256\u0003",
    "\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0254\u0255\u0003",
    "\u0002\u0002\u0002\u0255C\u0003\u0002\u0002\u0002\u0256\u0254\u0003",
    "\u0002\u0002\u0002\u0257\u0258\u0007I\u0002\u0002\u0258\u0259\u0007",
    "\b\u0002\u0002\u0259\u025a\u0005F$\u0002\u025a\u025b\u0007\t\u0002\u0002",
    "\u025b\u025c\u0007\u0005\u0002\u0002\u025c\u025d\t\u0007\u0002\u0002",
    "\u025d\u025e\u0007\u0007\u0002\u0002\u025e\u025f\u0007\u0003\u0002\u0002",
    "\u025f\u0260\u0005H%\u0002\u0260\u0261\u0007\u0004\u0002\u0002\u0261",
    "E\u0003\u0002\u0002\u0002\u0262\u0263\b$\u0001\u0002\u0263\u0264\u0005",
    "*\u0016\u0002\u0264\u0265\t\u0002\u0002\u0002\u0265\u0266\u0005*\u0016",
    "\u0002\u0266\u026c\u0003\u0002\u0002\u0002\u0267\u0268\f\u0003\u0002",
    "\u0002\u0268\u0269\t\b\u0002\u0002\u0269\u026b\u0005F$\u0004\u026a\u0267",
    "\u0003\u0002\u0002\u0002\u026b\u026e\u0003\u0002\u0002\u0002\u026c\u026a",
    "\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026dG",
    "\u0003\u0002\u0002\u0002\u026e\u026c\u0003\u0002\u0002\u0002\u026f\u0284",
    "\u0005*\u0016\u0002\u0270\u0271\u0005*\u0016\u0002\u0271\u0272\u0007",
    "\u0006\u0002\u0002\u0272\u0273\u0005*\u0016\u0002\u0273\u0274\u0007",
    "\u0006\u0002\u0002\u0274\u0275\u0005*\u0016\u0002\u0275\u0284\u0003",
    "\u0002\u0002\u0002\u0276\u0277\u0005*\u0016\u0002\u0277\u0278\u0007",
    "\u0006\u0002\u0002\u0278\u0279\u0005*\u0016\u0002\u0279\u027a\u0007",
    "\u0006\u0002\u0002\u027a\u027b\u0005*\u0016\u0002\u027b\u027c\u0007",
    "\u0006\u0002\u0002\u027c\u027d\u0005*\u0016\u0002\u027d\u0284\u0003",
    "\u0002\u0002\u0002\u027e\u027f\u0007R\u0002\u0002\u027f\u0280\u0007",
    "\u0005\u0002\u0002\u0280\u0281\u0005*\u0016\u0002\u0281\u0282\u0007",
    "\u0007\u0002\u0002\u0282\u0284\u0003\u0002\u0002\u0002\u0283\u026f\u0003",
    "\u0002\u0002\u0002\u0283\u0270\u0003\u0002\u0002\u0002\u0283\u0276\u0003",
    "\u0002\u0002\u0002\u0283\u027e\u0003\u0002\u0002\u0002\u0284I\u0003",
    "\u0002\u0002\u0002\u0285\u0286\u0007\b\u0002\u0002\u0286\u0287\t\u0007",
    "\u0002\u0002\u0287\u0288\u0007\u0006\u0002\u0002\u0288\u0289\t\u0007",
    "\u0002\u0002\u0289\u028a\u0007\u0006\u0002\u0002\u028a\u028b\t\u0007",
    "\u0002\u0002\u028b\u028c\u0007\u0006\u0002\u0002\u028c\u028d\t\u0007",
    "\u0002\u0002\u028d\u0291\u0007\t\u0002\u0002\u028e\u0291\u0007J\u0002",
    "\u0002\u028f\u0291\u0007K\u0002\u0002\u0290\u0285\u0003\u0002\u0002",
    "\u0002\u0290\u028e\u0003\u0002\u0002\u0002\u0290\u028f\u0003\u0002\u0002",
    "\u0002\u0291K\u0003\u0002\u0002\u0002\u0292\u0293\u0007\u0002\u0002",
    "\u0003\u0293M\u0003\u0002\u0002\u0002;bfjvz\u007f\u00a4\u00c3\u00c8",
    "\u00ce\u00d4\u00db\u00e5\u00ee\u00fb\u0108\u010a\u0111\u011b\u012d\u0132",
    "\u0139\u013f\u0146\u014c\u0153\u0159\u0171\u017b\u0183\u0185\u0191\u0194",
    "\u019b\u019e\u01a0\u01a6\u01ad\u01b8\u01d4\u01d9\u01de\u01e3\u01e7\u01ec",
    "\u01f2\u01fe\u020a\u0211\u0218\u022a\u0232\u024a\u0254\u026c\u0283\u0290"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'{'", "'}'", "'['", "','", "']'", "'('", "')'", 
                     "';'", "'='", "'real'", "'complex'", "'<'", "'>'", 
                     "'<='", "'>='", "'<>'", "'?'", "'~?'", "'|'", "'^'", 
                     "'&'", "'~'", "'+'", "'-'", "'*'", "'i'", "'/'", "'time'", 
                     "'mod'", "'mod2'", "'pha'", "'re'", "'im'", "'cos'", 
                     "'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'log'", 
                     "'exp'", "'sqrt'", "'abs'", "'ceil'", "'floor'", "'square'", 
                     "'saw'", "'ramp'", "'pow'", "'atan2'", "'hypot'", "'max'", 
                     "'min'", "'pulse'", "'e'", "'pi'", "'2pi'", "'fractal'", 
                     "'orbit'", "'trap'", "'begin'", "'loop'", "'end'", 
                     "'init'", "'if'", "'else'", "'stop'", "'julia'", "'color'", 
                     "'palette'", "'rule'", null, null, null, null, "'CLOSE'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "FRACTAL", "ORBIT", "TRAP", 
                      "BEGIN", "LOOP", "END", "INIT", "IF", "ELSE", "STOP", 
                      "JULIA", "COLOR", "PALETTE", "RULE", "ARGB32", "ARGB24", 
                      "RATIONAL", "INTEGER", "PATHOP_0POINTS", "PATHOP_1POINTS", 
                      "PATHOP_2POINTS", "PATHOP_3POINTS", "VARIABLE", "COMMENT", 
                      "WHITESPACE" ];

var ruleNames =  [ "fractal", "orbit", "color", "begin", "loop", "end", 
                   "trap", "pathop", "beginstatement", "loopstatement", 
                   "endstatement", "statement", "statevariable", "statevariablelist", 
                   "simpleconditionexp", "conditionexp", "conditionexp2", 
                   "conditionexp3", "conditionexp4", "simpleexpression", 
                   "expression", "expression2", "expression3", "expression4", 
                   "function_expression", "constant", "variable", "real", 
                   "complex", "palette", "paletteelement", "colorinit", 
                   "colorstatement", "colorrule", "ruleexp", "colorexp", 
                   "colorargb", "eof" ];

function MandelbrotParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

MandelbrotParser.prototype = Object.create(antlr4.Parser.prototype);
MandelbrotParser.prototype.constructor = MandelbrotParser;

Object.defineProperty(MandelbrotParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

MandelbrotParser.EOF = antlr4.Token.EOF;
MandelbrotParser.T__0 = 1;
MandelbrotParser.T__1 = 2;
MandelbrotParser.T__2 = 3;
MandelbrotParser.T__3 = 4;
MandelbrotParser.T__4 = 5;
MandelbrotParser.T__5 = 6;
MandelbrotParser.T__6 = 7;
MandelbrotParser.T__7 = 8;
MandelbrotParser.T__8 = 9;
MandelbrotParser.T__9 = 10;
MandelbrotParser.T__10 = 11;
MandelbrotParser.T__11 = 12;
MandelbrotParser.T__12 = 13;
MandelbrotParser.T__13 = 14;
MandelbrotParser.T__14 = 15;
MandelbrotParser.T__15 = 16;
MandelbrotParser.T__16 = 17;
MandelbrotParser.T__17 = 18;
MandelbrotParser.T__18 = 19;
MandelbrotParser.T__19 = 20;
MandelbrotParser.T__20 = 21;
MandelbrotParser.T__21 = 22;
MandelbrotParser.T__22 = 23;
MandelbrotParser.T__23 = 24;
MandelbrotParser.T__24 = 25;
MandelbrotParser.T__25 = 26;
MandelbrotParser.T__26 = 27;
MandelbrotParser.T__27 = 28;
MandelbrotParser.T__28 = 29;
MandelbrotParser.T__29 = 30;
MandelbrotParser.T__30 = 31;
MandelbrotParser.T__31 = 32;
MandelbrotParser.T__32 = 33;
MandelbrotParser.T__33 = 34;
MandelbrotParser.T__34 = 35;
MandelbrotParser.T__35 = 36;
MandelbrotParser.T__36 = 37;
MandelbrotParser.T__37 = 38;
MandelbrotParser.T__38 = 39;
MandelbrotParser.T__39 = 40;
MandelbrotParser.T__40 = 41;
MandelbrotParser.T__41 = 42;
MandelbrotParser.T__42 = 43;
MandelbrotParser.T__43 = 44;
MandelbrotParser.T__44 = 45;
MandelbrotParser.T__45 = 46;
MandelbrotParser.T__46 = 47;
MandelbrotParser.T__47 = 48;
MandelbrotParser.T__48 = 49;
MandelbrotParser.T__49 = 50;
MandelbrotParser.T__50 = 51;
MandelbrotParser.T__51 = 52;
MandelbrotParser.T__52 = 53;
MandelbrotParser.T__53 = 54;
MandelbrotParser.T__54 = 55;
MandelbrotParser.T__55 = 56;
MandelbrotParser.T__56 = 57;
MandelbrotParser.FRACTAL = 58;
MandelbrotParser.ORBIT = 59;
MandelbrotParser.TRAP = 60;
MandelbrotParser.BEGIN = 61;
MandelbrotParser.LOOP = 62;
MandelbrotParser.END = 63;
MandelbrotParser.INIT = 64;
MandelbrotParser.IF = 65;
MandelbrotParser.ELSE = 66;
MandelbrotParser.STOP = 67;
MandelbrotParser.JULIA = 68;
MandelbrotParser.COLOR = 69;
MandelbrotParser.PALETTE = 70;
MandelbrotParser.RULE = 71;
MandelbrotParser.ARGB32 = 72;
MandelbrotParser.ARGB24 = 73;
MandelbrotParser.RATIONAL = 74;
MandelbrotParser.INTEGER = 75;
MandelbrotParser.PATHOP_0POINTS = 76;
MandelbrotParser.PATHOP_1POINTS = 77;
MandelbrotParser.PATHOP_2POINTS = 78;
MandelbrotParser.PATHOP_3POINTS = 79;
MandelbrotParser.VARIABLE = 80;
MandelbrotParser.COMMENT = 81;
MandelbrotParser.WHITESPACE = 82;

MandelbrotParser.RULE_fractal = 0;
MandelbrotParser.RULE_orbit = 1;
MandelbrotParser.RULE_color = 2;
MandelbrotParser.RULE_begin = 3;
MandelbrotParser.RULE_loop = 4;
MandelbrotParser.RULE_end = 5;
MandelbrotParser.RULE_trap = 6;
MandelbrotParser.RULE_pathop = 7;
MandelbrotParser.RULE_beginstatement = 8;
MandelbrotParser.RULE_loopstatement = 9;
MandelbrotParser.RULE_endstatement = 10;
MandelbrotParser.RULE_statement = 11;
MandelbrotParser.RULE_statevariable = 12;
MandelbrotParser.RULE_statevariablelist = 13;
MandelbrotParser.RULE_simpleconditionexp = 14;
MandelbrotParser.RULE_conditionexp = 15;
MandelbrotParser.RULE_conditionexp2 = 16;
MandelbrotParser.RULE_conditionexp3 = 17;
MandelbrotParser.RULE_conditionexp4 = 18;
MandelbrotParser.RULE_simpleexpression = 19;
MandelbrotParser.RULE_expression = 20;
MandelbrotParser.RULE_expression2 = 21;
MandelbrotParser.RULE_expression3 = 22;
MandelbrotParser.RULE_expression4 = 23;
MandelbrotParser.RULE_function_expression = 24;
MandelbrotParser.RULE_constant = 25;
MandelbrotParser.RULE_variable = 26;
MandelbrotParser.RULE_real = 27;
MandelbrotParser.RULE_complex = 28;
MandelbrotParser.RULE_palette = 29;
MandelbrotParser.RULE_paletteelement = 30;
MandelbrotParser.RULE_colorinit = 31;
MandelbrotParser.RULE_colorstatement = 32;
MandelbrotParser.RULE_colorrule = 33;
MandelbrotParser.RULE_ruleexp = 34;
MandelbrotParser.RULE_colorexp = 35;
MandelbrotParser.RULE_colorargb = 36;
MandelbrotParser.RULE_eof = 37;

function FractalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_fractal;
    this.f = null; // Token
    return this;
}

FractalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FractalContext.prototype.constructor = FractalContext;

FractalContext.prototype.orbit = function() {
    return this.getTypedRuleContext(OrbitContext,0);
};

FractalContext.prototype.color = function() {
    return this.getTypedRuleContext(ColorContext,0);
};

FractalContext.prototype.eof = function() {
    return this.getTypedRuleContext(EofContext,0);
};

FractalContext.prototype.FRACTAL = function() {
    return this.getToken(MandelbrotParser.FRACTAL, 0);
};

FractalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterFractal(this);
	}
};

FractalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitFractal(this);
	}
};




MandelbrotParser.FractalContext = FractalContext;

MandelbrotParser.prototype.fractal = function() {

    var localctx = new FractalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, MandelbrotParser.RULE_fractal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 76;
        localctx.f = this.match(MandelbrotParser.FRACTAL);
        this.state = 77;
        this.match(MandelbrotParser.T__0);
        this.state = 78;
        this.orbit();
        this.state = 79;
        this.color();
        this.state = 80;
        this.match(MandelbrotParser.T__1);
        this.state = 81;
        this.eof();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrbitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_orbit;
    this.o = null; // Token
    this.ra = null; // ComplexContext
    this.rb = null; // ComplexContext
    return this;
}

OrbitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrbitContext.prototype.constructor = OrbitContext;

OrbitContext.prototype.statevariablelist = function() {
    return this.getTypedRuleContext(StatevariablelistContext,0);
};

OrbitContext.prototype.loop = function() {
    return this.getTypedRuleContext(LoopContext,0);
};

OrbitContext.prototype.ORBIT = function() {
    return this.getToken(MandelbrotParser.ORBIT, 0);
};

OrbitContext.prototype.complex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComplexContext);
    } else {
        return this.getTypedRuleContext(ComplexContext,i);
    }
};

OrbitContext.prototype.trap = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TrapContext);
    } else {
        return this.getTypedRuleContext(TrapContext,i);
    }
};

OrbitContext.prototype.begin = function() {
    return this.getTypedRuleContext(BeginContext,0);
};

OrbitContext.prototype.end = function() {
    return this.getTypedRuleContext(EndContext,0);
};

OrbitContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterOrbit(this);
	}
};

OrbitContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitOrbit(this);
	}
};




MandelbrotParser.OrbitContext = OrbitContext;

MandelbrotParser.prototype.orbit = function() {

    var localctx = new OrbitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, MandelbrotParser.RULE_orbit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 83;
        localctx.o = this.match(MandelbrotParser.ORBIT);
        this.state = 84;
        this.match(MandelbrotParser.T__2);
        this.state = 85;
        localctx.ra = this.complex();
        this.state = 86;
        this.match(MandelbrotParser.T__3);
        this.state = 87;
        localctx.rb = this.complex();
        this.state = 88;
        this.match(MandelbrotParser.T__4);
        this.state = 89;
        this.match(MandelbrotParser.T__2);
        this.state = 90;
        this.statevariablelist(0);
        this.state = 91;
        this.match(MandelbrotParser.T__4);
        this.state = 92;
        this.match(MandelbrotParser.T__0);
        this.state = 96;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MandelbrotParser.TRAP) {
            this.state = 93;
            this.trap();
            this.state = 98;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 100;
        _la = this._input.LA(1);
        if(_la===MandelbrotParser.BEGIN) {
            this.state = 99;
            this.begin();
        }

        this.state = 102;
        this.loop();
        this.state = 104;
        _la = this._input.LA(1);
        if(_la===MandelbrotParser.END) {
            this.state = 103;
            this.end();
        }

        this.state = 106;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_color;
    this.c = null; // Token
    this.argb = null; // ColorargbContext
    return this;
}

ColorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorContext.prototype.constructor = ColorContext;

ColorContext.prototype.COLOR = function() {
    return this.getToken(MandelbrotParser.COLOR, 0);
};

ColorContext.prototype.colorargb = function() {
    return this.getTypedRuleContext(ColorargbContext,0);
};

ColorContext.prototype.palette = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PaletteContext);
    } else {
        return this.getTypedRuleContext(PaletteContext,i);
    }
};

ColorContext.prototype.colorinit = function() {
    return this.getTypedRuleContext(ColorinitContext,0);
};

ColorContext.prototype.colorrule = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColorruleContext);
    } else {
        return this.getTypedRuleContext(ColorruleContext,i);
    }
};

ColorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColor(this);
	}
};

ColorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColor(this);
	}
};




MandelbrotParser.ColorContext = ColorContext;

MandelbrotParser.prototype.color = function() {

    var localctx = new ColorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, MandelbrotParser.RULE_color);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 108;
        localctx.c = this.match(MandelbrotParser.COLOR);
        this.state = 109;
        this.match(MandelbrotParser.T__2);
        this.state = 110;
        localctx.argb = this.colorargb();
        this.state = 111;
        this.match(MandelbrotParser.T__4);
        this.state = 112;
        this.match(MandelbrotParser.T__0);
        this.state = 116;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MandelbrotParser.PALETTE) {
            this.state = 113;
            this.palette();
            this.state = 118;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 120;
        _la = this._input.LA(1);
        if(_la===MandelbrotParser.INIT) {
            this.state = 119;
            this.colorinit();
        }

        this.state = 125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MandelbrotParser.RULE) {
            this.state = 122;
            this.colorrule();
            this.state = 127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 128;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BeginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_begin;
    this.b = null; // Token
    return this;
}

BeginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginContext.prototype.constructor = BeginContext;

BeginContext.prototype.beginstatement = function() {
    return this.getTypedRuleContext(BeginstatementContext,0);
};

BeginContext.prototype.BEGIN = function() {
    return this.getToken(MandelbrotParser.BEGIN, 0);
};

BeginContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterBegin(this);
	}
};

BeginContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitBegin(this);
	}
};




MandelbrotParser.BeginContext = BeginContext;

MandelbrotParser.prototype.begin = function() {

    var localctx = new BeginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, MandelbrotParser.RULE_begin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 130;
        localctx.b = this.match(MandelbrotParser.BEGIN);
        this.state = 131;
        this.match(MandelbrotParser.T__0);
        this.state = 132;
        this.beginstatement();
        this.state = 133;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_loop;
    this.l = null; // Token
    this.lb = null; // Token
    this.le = null; // Token
    this.e = null; // ConditionexpContext
    return this;
}

LoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopContext.prototype.constructor = LoopContext;

LoopContext.prototype.loopstatement = function() {
    return this.getTypedRuleContext(LoopstatementContext,0);
};

LoopContext.prototype.LOOP = function() {
    return this.getToken(MandelbrotParser.LOOP, 0);
};

LoopContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MandelbrotParser.INTEGER);
    } else {
        return this.getToken(MandelbrotParser.INTEGER, i);
    }
};


LoopContext.prototype.conditionexp = function() {
    return this.getTypedRuleContext(ConditionexpContext,0);
};

LoopContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterLoop(this);
	}
};

LoopContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitLoop(this);
	}
};




MandelbrotParser.LoopContext = LoopContext;

MandelbrotParser.prototype.loop = function() {

    var localctx = new LoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, MandelbrotParser.RULE_loop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 135;
        localctx.l = this.match(MandelbrotParser.LOOP);
        this.state = 136;
        this.match(MandelbrotParser.T__2);
        this.state = 137;
        localctx.lb = this.match(MandelbrotParser.INTEGER);
        this.state = 138;
        this.match(MandelbrotParser.T__3);
        this.state = 139;
        localctx.le = this.match(MandelbrotParser.INTEGER);
        this.state = 140;
        this.match(MandelbrotParser.T__4);
        this.state = 141;
        this.match(MandelbrotParser.T__5);
        this.state = 142;
        localctx.e = this.conditionexp(0);
        this.state = 143;
        this.match(MandelbrotParser.T__6);
        this.state = 144;
        this.match(MandelbrotParser.T__0);
        this.state = 145;
        this.loopstatement();
        this.state = 146;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_end;
    this.e = null; // Token
    return this;
}

EndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndContext.prototype.constructor = EndContext;

EndContext.prototype.endstatement = function() {
    return this.getTypedRuleContext(EndstatementContext,0);
};

EndContext.prototype.END = function() {
    return this.getToken(MandelbrotParser.END, 0);
};

EndContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterEnd(this);
	}
};

EndContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitEnd(this);
	}
};




MandelbrotParser.EndContext = EndContext;

MandelbrotParser.prototype.end = function() {

    var localctx = new EndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, MandelbrotParser.RULE_end);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 148;
        localctx.e = this.match(MandelbrotParser.END);
        this.state = 149;
        this.match(MandelbrotParser.T__0);
        this.state = 150;
        this.endstatement();
        this.state = 151;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_trap;
    this.t = null; // Token
    this.n = null; // Token
    this.c = null; // ComplexContext
    return this;
}

TrapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrapContext.prototype.constructor = TrapContext;

TrapContext.prototype.TRAP = function() {
    return this.getToken(MandelbrotParser.TRAP, 0);
};

TrapContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

TrapContext.prototype.complex = function() {
    return this.getTypedRuleContext(ComplexContext,0);
};

TrapContext.prototype.pathop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathopContext);
    } else {
        return this.getTypedRuleContext(PathopContext,i);
    }
};

TrapContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterTrap(this);
	}
};

TrapContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitTrap(this);
	}
};




MandelbrotParser.TrapContext = TrapContext;

MandelbrotParser.prototype.trap = function() {

    var localctx = new TrapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, MandelbrotParser.RULE_trap);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 153;
        localctx.t = this.match(MandelbrotParser.TRAP);
        this.state = 154;
        localctx.n = this.match(MandelbrotParser.VARIABLE);
        this.state = 155;
        this.match(MandelbrotParser.T__2);
        this.state = 156;
        localctx.c = this.complex();
        this.state = 157;
        this.match(MandelbrotParser.T__4);
        this.state = 158;
        this.match(MandelbrotParser.T__0);
        this.state = 162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (MandelbrotParser.PATHOP_0POINTS - 76)) | (1 << (MandelbrotParser.PATHOP_1POINTS - 76)) | (1 << (MandelbrotParser.PATHOP_2POINTS - 76)) | (1 << (MandelbrotParser.PATHOP_3POINTS - 76)))) !== 0)) {
            this.state = 159;
            this.pathop();
            this.state = 164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 165;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_pathop;
    this.o = null; // Token
    this.c = null; // ComplexContext
    this.c1 = null; // ComplexContext
    this.c2 = null; // ComplexContext
    this.c3 = null; // ComplexContext
    return this;
}

PathopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathopContext.prototype.constructor = PathopContext;

PathopContext.prototype.PATHOP_0POINTS = function() {
    return this.getToken(MandelbrotParser.PATHOP_0POINTS, 0);
};

PathopContext.prototype.PATHOP_1POINTS = function() {
    return this.getToken(MandelbrotParser.PATHOP_1POINTS, 0);
};

PathopContext.prototype.complex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComplexContext);
    } else {
        return this.getTypedRuleContext(ComplexContext,i);
    }
};

PathopContext.prototype.PATHOP_2POINTS = function() {
    return this.getToken(MandelbrotParser.PATHOP_2POINTS, 0);
};

PathopContext.prototype.PATHOP_3POINTS = function() {
    return this.getToken(MandelbrotParser.PATHOP_3POINTS, 0);
};

PathopContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterPathop(this);
	}
};

PathopContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitPathop(this);
	}
};




MandelbrotParser.PathopContext = PathopContext;

MandelbrotParser.prototype.pathop = function() {

    var localctx = new PathopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, MandelbrotParser.RULE_pathop);
    try {
        this.state = 193;
        switch(this._input.LA(1)) {
        case MandelbrotParser.PATHOP_0POINTS:
            this.enterOuterAlt(localctx, 1);
            this.state = 167;
            localctx.o = this.match(MandelbrotParser.PATHOP_0POINTS);
            this.state = 168;
            this.match(MandelbrotParser.T__7);
            break;
        case MandelbrotParser.PATHOP_1POINTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 169;
            localctx.o = this.match(MandelbrotParser.PATHOP_1POINTS);
            this.state = 170;
            this.match(MandelbrotParser.T__5);
            this.state = 171;
            localctx.c = this.complex();
            this.state = 172;
            this.match(MandelbrotParser.T__6);
            this.state = 173;
            this.match(MandelbrotParser.T__7);
            break;
        case MandelbrotParser.PATHOP_2POINTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 175;
            localctx.o = this.match(MandelbrotParser.PATHOP_2POINTS);
            this.state = 176;
            this.match(MandelbrotParser.T__5);
            this.state = 177;
            localctx.c1 = this.complex();
            this.state = 178;
            this.match(MandelbrotParser.T__3);
            this.state = 179;
            localctx.c2 = this.complex();
            this.state = 180;
            this.match(MandelbrotParser.T__6);
            this.state = 181;
            this.match(MandelbrotParser.T__7);
            break;
        case MandelbrotParser.PATHOP_3POINTS:
            this.enterOuterAlt(localctx, 4);
            this.state = 183;
            localctx.o = this.match(MandelbrotParser.PATHOP_3POINTS);
            this.state = 184;
            this.match(MandelbrotParser.T__5);
            this.state = 185;
            localctx.c1 = this.complex();
            this.state = 186;
            this.match(MandelbrotParser.T__3);
            this.state = 187;
            localctx.c2 = this.complex();
            this.state = 188;
            this.match(MandelbrotParser.T__3);
            this.state = 189;
            localctx.c3 = this.complex();
            this.state = 190;
            this.match(MandelbrotParser.T__6);
            this.state = 191;
            this.match(MandelbrotParser.T__7);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BeginstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_beginstatement;
    return this;
}

BeginstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginstatementContext.prototype.constructor = BeginstatementContext;

BeginstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BeginstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterBeginstatement(this);
	}
};

BeginstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitBeginstatement(this);
	}
};




MandelbrotParser.BeginstatementContext = BeginstatementContext;

MandelbrotParser.prototype.beginstatement = function() {

    var localctx = new BeginstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, MandelbrotParser.RULE_beginstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
            this.state = 195;
            this.statement();
            this.state = 200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoopstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_loopstatement;
    return this;
}

LoopstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopstatementContext.prototype.constructor = LoopstatementContext;

LoopstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

LoopstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterLoopstatement(this);
	}
};

LoopstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitLoopstatement(this);
	}
};




MandelbrotParser.LoopstatementContext = LoopstatementContext;

MandelbrotParser.prototype.loopstatement = function() {

    var localctx = new LoopstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, MandelbrotParser.RULE_loopstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 204;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
            this.state = 201;
            this.statement();
            this.state = 206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_endstatement;
    return this;
}

EndstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndstatementContext.prototype.constructor = EndstatementContext;

EndstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

EndstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterEndstatement(this);
	}
};

EndstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitEndstatement(this);
	}
};




MandelbrotParser.EndstatementContext = EndstatementContext;

MandelbrotParser.prototype.endstatement = function() {

    var localctx = new EndstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, MandelbrotParser.RULE_endstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
            this.state = 207;
            this.statement();
            this.state = 212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_statement;
    this.v = null; // Token
    this.e = null; // ExpressionContext
    this.f = null; // Token
    this.c = null; // ConditionexpContext
    this.t = null; // Token
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.ELSE = function() {
    return this.getToken(MandelbrotParser.ELSE, 0);
};

StatementContext.prototype.IF = function() {
    return this.getToken(MandelbrotParser.IF, 0);
};

StatementContext.prototype.conditionexp = function() {
    return this.getTypedRuleContext(ConditionexpContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.STOP = function() {
    return this.getToken(MandelbrotParser.STOP, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitStatement(this);
	}
};




MandelbrotParser.StatementContext = StatementContext;

MandelbrotParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, MandelbrotParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 213;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            this.state = 214;
            this.match(MandelbrotParser.T__8);
            this.state = 215;
            localctx.e = this.expression(0);
            this.state = 217;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__7) {
                this.state = 216;
                this.match(MandelbrotParser.T__7);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 219;
            localctx.f = this.match(MandelbrotParser.IF);
            this.state = 220;
            this.match(MandelbrotParser.T__5);
            this.state = 221;
            localctx.c = this.conditionexp(0);
            this.state = 222;
            this.match(MandelbrotParser.T__6);
            this.state = 223;
            this.match(MandelbrotParser.T__0);
            this.state = 227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
                this.state = 224;
                this.statement();
                this.state = 229;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 230;
            this.match(MandelbrotParser.T__1);
            this.state = 231;
            this.match(MandelbrotParser.ELSE);
            this.state = 232;
            this.match(MandelbrotParser.T__0);
            this.state = 236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
                this.state = 233;
                this.statement();
                this.state = 238;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 239;
            this.match(MandelbrotParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 241;
            localctx.f = this.match(MandelbrotParser.IF);
            this.state = 242;
            this.match(MandelbrotParser.T__5);
            this.state = 243;
            localctx.c = this.conditionexp(0);
            this.state = 244;
            this.match(MandelbrotParser.T__6);
            this.state = 245;
            this.match(MandelbrotParser.T__0);
            this.state = 249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
                this.state = 246;
                this.statement();
                this.state = 251;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 252;
            this.match(MandelbrotParser.T__1);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 254;
            localctx.f = this.match(MandelbrotParser.IF);
            this.state = 255;
            this.match(MandelbrotParser.T__5);
            this.state = 256;
            localctx.c = this.conditionexp(0);
            this.state = 257;
            this.match(MandelbrotParser.T__6);
            this.state = 258;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 260;
            localctx.t = this.match(MandelbrotParser.STOP);
            this.state = 262;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__7) {
                this.state = 261;
                this.match(MandelbrotParser.T__7);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatevariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_statevariable;
    this.v = null; // Token
    return this;
}

StatevariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatevariableContext.prototype.constructor = StatevariableContext;

StatevariableContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

StatevariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterStatevariable(this);
	}
};

StatevariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitStatevariable(this);
	}
};




MandelbrotParser.StatevariableContext = StatevariableContext;

MandelbrotParser.prototype.statevariable = function() {

    var localctx = new StatevariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, MandelbrotParser.RULE_statevariable);
    try {
        this.state = 271;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__9:
            this.enterOuterAlt(localctx, 1);
            this.state = 266;
            this.match(MandelbrotParser.T__9);
            this.state = 267;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            break;
        case MandelbrotParser.T__10:
            this.enterOuterAlt(localctx, 2);
            this.state = 268;
            this.match(MandelbrotParser.T__10);
            this.state = 269;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            break;
        case MandelbrotParser.VARIABLE:
            this.enterOuterAlt(localctx, 3);
            this.state = 270;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatevariablelistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_statevariablelist;
    return this;
}

StatevariablelistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatevariablelistContext.prototype.constructor = StatevariablelistContext;

StatevariablelistContext.prototype.statevariable = function() {
    return this.getTypedRuleContext(StatevariableContext,0);
};

StatevariablelistContext.prototype.statevariablelist = function() {
    return this.getTypedRuleContext(StatevariablelistContext,0);
};

StatevariablelistContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterStatevariablelist(this);
	}
};

StatevariablelistContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitStatevariablelist(this);
	}
};



MandelbrotParser.prototype.statevariablelist = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StatevariablelistContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 26;
    this.enterRecursionRule(localctx, 26, MandelbrotParser.RULE_statevariablelist, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.statevariable();
        this._ctx.stop = this._input.LT(-1);
        this.state = 281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StatevariablelistContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_statevariablelist);
                this.state = 276;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 277;
                this.match(MandelbrotParser.T__3);
                this.state = 278;
                this.statevariable(); 
            }
            this.state = 283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function SimpleconditionexpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_simpleconditionexp;
    this.e1 = null; // ExpressionContext
    this.o = null; // Token
    this.e2 = null; // ExpressionContext
    this.v = null; // Token
    this.e = null; // ExpressionContext
    this.t = null; // Token
    this.s = null; // Token
    this.c = null; // ConditionexpContext
    return this;
}

SimpleconditionexpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleconditionexpContext.prototype.constructor = SimpleconditionexpContext;

SimpleconditionexpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleconditionexpContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

SimpleconditionexpContext.prototype.JULIA = function() {
    return this.getToken(MandelbrotParser.JULIA, 0);
};

SimpleconditionexpContext.prototype.conditionexp = function() {
    return this.getTypedRuleContext(ConditionexpContext,0);
};

SimpleconditionexpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterSimpleconditionexp(this);
	}
};

SimpleconditionexpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitSimpleconditionexp(this);
	}
};




MandelbrotParser.SimpleconditionexpContext = SimpleconditionexpContext;

MandelbrotParser.prototype.simpleconditionexp = function() {

    var localctx = new SimpleconditionexpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, MandelbrotParser.RULE_simpleconditionexp);
    var _la = 0; // Token type
    try {
        this.state = 299;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 284;
            localctx.e1 = this.expression(0);
            this.state = 285;
            localctx.o = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MandelbrotParser.T__8) | (1 << MandelbrotParser.T__11) | (1 << MandelbrotParser.T__12) | (1 << MandelbrotParser.T__13) | (1 << MandelbrotParser.T__14) | (1 << MandelbrotParser.T__15))) !== 0))) {
                localctx.o = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 286;
            localctx.e2 = this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 288;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            this.state = 289;
            this.match(MandelbrotParser.T__16);
            this.state = 290;
            localctx.e = this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 291;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            this.state = 292;
            this.match(MandelbrotParser.T__17);
            this.state = 293;
            localctx.e = this.expression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 294;
            localctx.t = this.match(MandelbrotParser.JULIA);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 295;
            localctx.s = this.match(MandelbrotParser.T__5);
            this.state = 296;
            localctx.c = this.conditionexp(0);
            this.state = 297;
            this.match(MandelbrotParser.T__6);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionexpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_conditionexp;
    this.c1 = null; // ConditionexpContext
    this.c = null; // SimpleconditionexpContext
    this.c2 = null; // Conditionexp2Context
    this.l = null; // Token
    return this;
}

ConditionexpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionexpContext.prototype.constructor = ConditionexpContext;

ConditionexpContext.prototype.simpleconditionexp = function() {
    return this.getTypedRuleContext(SimpleconditionexpContext,0);
};

ConditionexpContext.prototype.conditionexp2 = function() {
    return this.getTypedRuleContext(Conditionexp2Context,0);
};

ConditionexpContext.prototype.conditionexp = function() {
    return this.getTypedRuleContext(ConditionexpContext,0);
};

ConditionexpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterConditionexp(this);
	}
};

ConditionexpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitConditionexp(this);
	}
};



MandelbrotParser.prototype.conditionexp = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionexpContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, MandelbrotParser.RULE_conditionexp, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 304;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.state = 302;
            localctx.c = this.simpleconditionexp();
            break;

        case 2:
            this.state = 303;
            localctx.c2 = this.conditionexp2(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 311;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionexpContext(this, _parentctx, _parentState);
                localctx.c1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_conditionexp);
                this.state = 306;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 307;
                localctx.l = this.match(MandelbrotParser.T__18);
                this.state = 308;
                localctx.c2 = this.conditionexp2(0); 
            }
            this.state = 313;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Conditionexp2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_conditionexp2;
    this.c1 = null; // Conditionexp2Context
    this.c = null; // SimpleconditionexpContext
    this.c2 = null; // Conditionexp3Context
    this.l = null; // Token
    return this;
}

Conditionexp2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditionexp2Context.prototype.constructor = Conditionexp2Context;

Conditionexp2Context.prototype.simpleconditionexp = function() {
    return this.getTypedRuleContext(SimpleconditionexpContext,0);
};

Conditionexp2Context.prototype.conditionexp3 = function() {
    return this.getTypedRuleContext(Conditionexp3Context,0);
};

Conditionexp2Context.prototype.conditionexp2 = function() {
    return this.getTypedRuleContext(Conditionexp2Context,0);
};

Conditionexp2Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterConditionexp2(this);
	}
};

Conditionexp2Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitConditionexp2(this);
	}
};



MandelbrotParser.prototype.conditionexp2 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Conditionexp2Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 32;
    this.enterRecursionRule(localctx, 32, MandelbrotParser.RULE_conditionexp2, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.state = 315;
            localctx.c = this.simpleconditionexp();
            break;

        case 2:
            this.state = 316;
            localctx.c2 = this.conditionexp3(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 324;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Conditionexp2Context(this, _parentctx, _parentState);
                localctx.c1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_conditionexp2);
                this.state = 319;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 320;
                localctx.l = this.match(MandelbrotParser.T__19);
                this.state = 321;
                localctx.c2 = this.conditionexp3(0); 
            }
            this.state = 326;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Conditionexp3Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_conditionexp3;
    this.c1 = null; // Conditionexp3Context
    this.c = null; // SimpleconditionexpContext
    this.c2 = null; // Conditionexp4Context
    this.l = null; // Token
    return this;
}

Conditionexp3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditionexp3Context.prototype.constructor = Conditionexp3Context;

Conditionexp3Context.prototype.simpleconditionexp = function() {
    return this.getTypedRuleContext(SimpleconditionexpContext,0);
};

Conditionexp3Context.prototype.conditionexp4 = function() {
    return this.getTypedRuleContext(Conditionexp4Context,0);
};

Conditionexp3Context.prototype.conditionexp3 = function() {
    return this.getTypedRuleContext(Conditionexp3Context,0);
};

Conditionexp3Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterConditionexp3(this);
	}
};

Conditionexp3Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitConditionexp3(this);
	}
};



MandelbrotParser.prototype.conditionexp3 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Conditionexp3Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 34;
    this.enterRecursionRule(localctx, 34, MandelbrotParser.RULE_conditionexp3, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.state = 328;
            localctx.c = this.simpleconditionexp();
            break;

        case 2:
            this.state = 329;
            localctx.c2 = this.conditionexp4();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 337;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Conditionexp3Context(this, _parentctx, _parentState);
                localctx.c1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_conditionexp3);
                this.state = 332;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 333;
                localctx.l = this.match(MandelbrotParser.T__20);
                this.state = 334;
                localctx.c2 = this.conditionexp4(); 
            }
            this.state = 339;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Conditionexp4Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_conditionexp4;
    this.c1 = null; // SimpleconditionexpContext
    this.n = null; // Token
    this.c2 = null; // Conditionexp4Context
    return this;
}

Conditionexp4Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditionexp4Context.prototype.constructor = Conditionexp4Context;

Conditionexp4Context.prototype.simpleconditionexp = function() {
    return this.getTypedRuleContext(SimpleconditionexpContext,0);
};

Conditionexp4Context.prototype.conditionexp4 = function() {
    return this.getTypedRuleContext(Conditionexp4Context,0);
};

Conditionexp4Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterConditionexp4(this);
	}
};

Conditionexp4Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitConditionexp4(this);
	}
};




MandelbrotParser.Conditionexp4Context = Conditionexp4Context;

MandelbrotParser.prototype.conditionexp4 = function() {

    var localctx = new Conditionexp4Context(this, this._ctx, this.state);
    this.enterRule(localctx, 36, MandelbrotParser.RULE_conditionexp4);
    try {
        this.state = 343;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__5:
        case MandelbrotParser.T__11:
        case MandelbrotParser.T__18:
        case MandelbrotParser.T__22:
        case MandelbrotParser.T__23:
        case MandelbrotParser.T__25:
        case MandelbrotParser.T__27:
        case MandelbrotParser.T__28:
        case MandelbrotParser.T__29:
        case MandelbrotParser.T__30:
        case MandelbrotParser.T__31:
        case MandelbrotParser.T__32:
        case MandelbrotParser.T__33:
        case MandelbrotParser.T__34:
        case MandelbrotParser.T__35:
        case MandelbrotParser.T__36:
        case MandelbrotParser.T__37:
        case MandelbrotParser.T__38:
        case MandelbrotParser.T__39:
        case MandelbrotParser.T__40:
        case MandelbrotParser.T__41:
        case MandelbrotParser.T__42:
        case MandelbrotParser.T__43:
        case MandelbrotParser.T__44:
        case MandelbrotParser.T__45:
        case MandelbrotParser.T__46:
        case MandelbrotParser.T__47:
        case MandelbrotParser.T__48:
        case MandelbrotParser.T__49:
        case MandelbrotParser.T__50:
        case MandelbrotParser.T__51:
        case MandelbrotParser.T__52:
        case MandelbrotParser.T__53:
        case MandelbrotParser.T__54:
        case MandelbrotParser.T__55:
        case MandelbrotParser.T__56:
        case MandelbrotParser.JULIA:
        case MandelbrotParser.RATIONAL:
        case MandelbrotParser.INTEGER:
        case MandelbrotParser.VARIABLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 340;
            localctx.c1 = this.simpleconditionexp();
            break;
        case MandelbrotParser.T__21:
            this.enterOuterAlt(localctx, 2);
            this.state = 341;
            localctx.n = this.match(MandelbrotParser.T__21);
            this.state = 342;
            localctx.c2 = this.conditionexp4();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleexpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_simpleexpression;
    this.p = null; // ConstantContext
    this.v = null; // VariableContext
    this.r = null; // RealContext
    this.f = null; // Function_expressionContext
    this.t = null; // Token
    this.e = null; // ExpressionContext
    this.m = null; // Token
    this.a = null; // Token
    this.er = null; // ExpressionContext
    this.ei = null; // ExpressionContext
    return this;
}

SimpleexpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleexpressionContext.prototype.constructor = SimpleexpressionContext;

SimpleexpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

SimpleexpressionContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

SimpleexpressionContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

SimpleexpressionContext.prototype.function_expression = function() {
    return this.getTypedRuleContext(Function_expressionContext,0);
};

SimpleexpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleexpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterSimpleexpression(this);
	}
};

SimpleexpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitSimpleexpression(this);
	}
};




MandelbrotParser.SimpleexpressionContext = SimpleexpressionContext;

MandelbrotParser.prototype.simpleexpression = function() {

    var localctx = new SimpleexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, MandelbrotParser.RULE_simpleexpression);
    try {
        this.state = 367;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 345;
            localctx.p = this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 346;
            localctx.v = this.variable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 347;
            localctx.r = this.real();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 348;
            localctx.f = this.function_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 349;
            localctx.t = this.match(MandelbrotParser.T__5);
            this.state = 350;
            localctx.e = this.expression(0);
            this.state = 351;
            this.match(MandelbrotParser.T__6);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 353;
            localctx.m = this.match(MandelbrotParser.T__18);
            this.state = 354;
            localctx.e = this.expression(0);
            this.state = 355;
            this.match(MandelbrotParser.T__18);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 357;
            localctx.a = this.match(MandelbrotParser.T__11);
            this.state = 358;
            localctx.e = this.expression(0);
            this.state = 359;
            this.match(MandelbrotParser.T__12);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 361;
            localctx.a = this.match(MandelbrotParser.T__11);
            this.state = 362;
            localctx.er = this.expression(0);
            this.state = 363;
            this.match(MandelbrotParser.T__3);
            this.state = 364;
            localctx.ei = this.expression(0);
            this.state = 365;
            this.match(MandelbrotParser.T__12);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_expression;
    this.e1 = null; // ExpressionContext
    this.e = null; // SimpleexpressionContext
    this.c = null; // ComplexContext
    this.e2 = null; // Expression2Context
    this.s = null; // Token
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.simpleexpression = function() {
    return this.getTypedRuleContext(SimpleexpressionContext,0);
};

ExpressionContext.prototype.complex = function() {
    return this.getTypedRuleContext(ComplexContext,0);
};

ExpressionContext.prototype.expression2 = function() {
    return this.getTypedRuleContext(Expression2Context,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitExpression(this);
	}
};



MandelbrotParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, MandelbrotParser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 377;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.state = 370;
            localctx.e = this.simpleexpression();
            break;

        case 2:
            this.state = 371;
            localctx.c = this.complex();
            break;

        case 3:
            this.state = 372;
            localctx.e2 = this.expression2(0);
            break;

        case 4:
            this.state = 373;
            localctx.e2 = this.expression2(0);
            this.state = 374;
            localctx.s = this.match(MandelbrotParser.T__22);
            this.state = 375;
            localctx.e1 = this.expression(2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 387;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 385;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    localctx.e1 = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression);
                    this.state = 379;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 380;
                    localctx.s = this.match(MandelbrotParser.T__22);
                    this.state = 381;
                    localctx.e2 = this.expression2(0);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    localctx.e1 = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression);
                    this.state = 382;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 383;
                    localctx.s = this.match(MandelbrotParser.T__23);
                    this.state = 384;
                    localctx.e2 = this.expression2(0);
                    break;

                } 
            }
            this.state = 389;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Expression2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_expression2;
    this.e1 = null; // Expression2Context
    this.e2 = null; // Expression2Context
    this.e = null; // SimpleexpressionContext
    this.e3 = null; // Expression3Context
    this.s = null; // Token
    this.i = null; // Token
    return this;
}

Expression2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression2Context.prototype.constructor = Expression2Context;

Expression2Context.prototype.simpleexpression = function() {
    return this.getTypedRuleContext(SimpleexpressionContext,0);
};

Expression2Context.prototype.expression3 = function() {
    return this.getTypedRuleContext(Expression3Context,0);
};

Expression2Context.prototype.expression2 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression2Context);
    } else {
        return this.getTypedRuleContext(Expression2Context,i);
    }
};

Expression2Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterExpression2(this);
	}
};

Expression2Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitExpression2(this);
	}
};



MandelbrotParser.prototype.expression2 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression2Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 42;
    this.enterRecursionRule(localctx, 42, MandelbrotParser.RULE_expression2, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.state = 391;
            localctx.e = this.simpleexpression();
            break;

        case 2:
            this.state = 392;
            localctx.e3 = this.expression3(0);
            break;

        case 3:
            this.state = 393;
            localctx.s = this.match(MandelbrotParser.T__23);
            this.state = 394;
            localctx.e2 = this.expression2(4);
            break;

        case 4:
            this.state = 395;
            localctx.s = this.match(MandelbrotParser.T__22);
            this.state = 396;
            localctx.e2 = this.expression2(3);
            break;

        case 5:
            this.state = 397;
            localctx.i = this.match(MandelbrotParser.T__25);
            this.state = 399;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__24) {
                this.state = 398;
                this.match(MandelbrotParser.T__24);
            }

            this.state = 401;
            localctx.e2 = this.expression2(2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 414;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 412;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Expression2Context(this, _parentctx, _parentState);
                    localctx.e1 = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression2);
                    this.state = 404;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 405;
                    localctx.s = this.match(MandelbrotParser.T__24);
                    this.state = 406;
                    localctx.e2 = this.expression2(6);
                    break;

                case 2:
                    localctx = new Expression2Context(this, _parentctx, _parentState);
                    localctx.e2 = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression2);
                    this.state = 407;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 409;
                    _la = this._input.LA(1);
                    if(_la===MandelbrotParser.T__24) {
                        this.state = 408;
                        this.match(MandelbrotParser.T__24);
                    }

                    this.state = 411;
                    localctx.i = this.match(MandelbrotParser.T__25);
                    break;

                } 
            }
            this.state = 416;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Expression3Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_expression3;
    this.e1 = null; // Expression3Context
    this.e = null; // SimpleexpressionContext
    this.e3 = null; // Expression4Context
    this.s = null; // Token
    this.e2 = null; // Expression3Context
    return this;
}

Expression3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression3Context.prototype.constructor = Expression3Context;

Expression3Context.prototype.simpleexpression = function() {
    return this.getTypedRuleContext(SimpleexpressionContext,0);
};

Expression3Context.prototype.expression4 = function() {
    return this.getTypedRuleContext(Expression4Context,0);
};

Expression3Context.prototype.expression3 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression3Context);
    } else {
        return this.getTypedRuleContext(Expression3Context,i);
    }
};

Expression3Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterExpression3(this);
	}
};

Expression3Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitExpression3(this);
	}
};



MandelbrotParser.prototype.expression3 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression3Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 44;
    this.enterRecursionRule(localctx, 44, MandelbrotParser.RULE_expression3, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.state = 418;
            localctx.e = this.simpleexpression();
            break;

        case 2:
            this.state = 419;
            localctx.e3 = this.expression4(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 427;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Expression3Context(this, _parentctx, _parentState);
                localctx.e1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression3);
                this.state = 422;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 423;
                localctx.s = this.match(MandelbrotParser.T__26);
                this.state = 424;
                localctx.e2 = this.expression3(2); 
            }
            this.state = 429;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Expression4Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_expression4;
    this.e1 = null; // Expression4Context
    this.e = null; // SimpleexpressionContext
    this.s = null; // Token
    this.e2 = null; // Expression4Context
    return this;
}

Expression4Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression4Context.prototype.constructor = Expression4Context;

Expression4Context.prototype.simpleexpression = function() {
    return this.getTypedRuleContext(SimpleexpressionContext,0);
};

Expression4Context.prototype.expression4 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression4Context);
    } else {
        return this.getTypedRuleContext(Expression4Context,i);
    }
};

Expression4Context.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterExpression4(this);
	}
};

Expression4Context.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitExpression4(this);
	}
};



MandelbrotParser.prototype.expression4 = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Expression4Context(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, MandelbrotParser.RULE_expression4, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        localctx.e = this.simpleexpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 438;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Expression4Context(this, _parentctx, _parentState);
                localctx.e1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_expression4);
                this.state = 433;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 434;
                localctx.s = this.match(MandelbrotParser.T__19);
                this.state = 435;
                localctx.e2 = this.expression4(2); 
            }
            this.state = 440;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Function_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_function_expression;
    this.f = null; // Token
    this.e = null; // ExpressionContext
    this.e1 = null; // ExpressionContext
    this.e2 = null; // ExpressionContext
    return this;
}

Function_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_expressionContext.prototype.constructor = Function_expressionContext;

Function_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterFunction_expression(this);
	}
};

Function_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitFunction_expression(this);
	}
};




MandelbrotParser.Function_expressionContext = Function_expressionContext;

MandelbrotParser.prototype.function_expression = function() {

    var localctx = new Function_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, MandelbrotParser.RULE_function_expression);
    var _la = 0; // Token type
    try {
        this.state = 466;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__27:
            this.enterOuterAlt(localctx, 1);
            this.state = 441;
            localctx.f = this.match(MandelbrotParser.T__27);
            this.state = 442;
            this.match(MandelbrotParser.T__5);
            this.state = 443;
            this.match(MandelbrotParser.T__6);
            break;
        case MandelbrotParser.T__28:
        case MandelbrotParser.T__29:
        case MandelbrotParser.T__30:
        case MandelbrotParser.T__31:
        case MandelbrotParser.T__32:
            this.enterOuterAlt(localctx, 2);
            this.state = 444;
            localctx.f = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (MandelbrotParser.T__28 - 29)) | (1 << (MandelbrotParser.T__29 - 29)) | (1 << (MandelbrotParser.T__30 - 29)) | (1 << (MandelbrotParser.T__31 - 29)) | (1 << (MandelbrotParser.T__32 - 29)))) !== 0))) {
                localctx.f = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 445;
            this.match(MandelbrotParser.T__5);
            this.state = 446;
            localctx.e = this.expression(0);
            this.state = 447;
            this.match(MandelbrotParser.T__6);
            break;
        case MandelbrotParser.T__33:
        case MandelbrotParser.T__34:
        case MandelbrotParser.T__35:
        case MandelbrotParser.T__36:
        case MandelbrotParser.T__37:
        case MandelbrotParser.T__38:
            this.enterOuterAlt(localctx, 3);
            this.state = 449;
            localctx.f = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (MandelbrotParser.T__33 - 34)) | (1 << (MandelbrotParser.T__34 - 34)) | (1 << (MandelbrotParser.T__35 - 34)) | (1 << (MandelbrotParser.T__36 - 34)) | (1 << (MandelbrotParser.T__37 - 34)) | (1 << (MandelbrotParser.T__38 - 34)))) !== 0))) {
                localctx.f = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 450;
            this.match(MandelbrotParser.T__5);
            this.state = 451;
            localctx.e = this.expression(0);
            this.state = 452;
            this.match(MandelbrotParser.T__6);
            break;
        case MandelbrotParser.T__39:
        case MandelbrotParser.T__40:
        case MandelbrotParser.T__41:
        case MandelbrotParser.T__42:
        case MandelbrotParser.T__43:
        case MandelbrotParser.T__44:
        case MandelbrotParser.T__45:
        case MandelbrotParser.T__46:
        case MandelbrotParser.T__47:
            this.enterOuterAlt(localctx, 4);
            this.state = 454;
            localctx.f = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (MandelbrotParser.T__39 - 40)) | (1 << (MandelbrotParser.T__40 - 40)) | (1 << (MandelbrotParser.T__41 - 40)) | (1 << (MandelbrotParser.T__42 - 40)) | (1 << (MandelbrotParser.T__43 - 40)) | (1 << (MandelbrotParser.T__44 - 40)) | (1 << (MandelbrotParser.T__45 - 40)) | (1 << (MandelbrotParser.T__46 - 40)) | (1 << (MandelbrotParser.T__47 - 40)))) !== 0))) {
                localctx.f = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 455;
            this.match(MandelbrotParser.T__5);
            this.state = 456;
            localctx.e = this.expression(0);
            this.state = 457;
            this.match(MandelbrotParser.T__6);
            break;
        case MandelbrotParser.T__48:
        case MandelbrotParser.T__49:
        case MandelbrotParser.T__50:
        case MandelbrotParser.T__51:
        case MandelbrotParser.T__52:
        case MandelbrotParser.T__53:
            this.enterOuterAlt(localctx, 5);
            this.state = 459;
            localctx.f = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (MandelbrotParser.T__48 - 49)) | (1 << (MandelbrotParser.T__49 - 49)) | (1 << (MandelbrotParser.T__50 - 49)) | (1 << (MandelbrotParser.T__51 - 49)) | (1 << (MandelbrotParser.T__52 - 49)) | (1 << (MandelbrotParser.T__53 - 49)))) !== 0))) {
                localctx.f = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 460;
            this.match(MandelbrotParser.T__5);
            this.state = 461;
            localctx.e1 = this.expression(0);
            this.state = 462;
            this.match(MandelbrotParser.T__3);
            this.state = 463;
            localctx.e2 = this.expression(0);
            this.state = 464;
            this.match(MandelbrotParser.T__6);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_constant;
    this.p = null; // Token
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;


ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitConstant(this);
	}
};




MandelbrotParser.ConstantContext = ConstantContext;

MandelbrotParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, MandelbrotParser.RULE_constant);
    try {
        this.state = 471;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__54:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            localctx.p = this.match(MandelbrotParser.T__54);
            break;
        case MandelbrotParser.T__55:
            this.enterOuterAlt(localctx, 2);
            this.state = 469;
            localctx.p = this.match(MandelbrotParser.T__55);
            break;
        case MandelbrotParser.T__56:
            this.enterOuterAlt(localctx, 3);
            this.state = 470;
            localctx.p = this.match(MandelbrotParser.T__56);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_variable;
    this.v = null; // Token
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitVariable(this);
	}
};




MandelbrotParser.VariableContext = VariableContext;

MandelbrotParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, MandelbrotParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        localctx.v = this.match(MandelbrotParser.VARIABLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RealContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_real;
    this.r = null; // Token
    return this;
}

RealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealContext.prototype.constructor = RealContext;

RealContext.prototype.RATIONAL = function() {
    return this.getToken(MandelbrotParser.RATIONAL, 0);
};

RealContext.prototype.INTEGER = function() {
    return this.getToken(MandelbrotParser.INTEGER, 0);
};

RealContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterReal(this);
	}
};

RealContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitReal(this);
	}
};




MandelbrotParser.RealContext = RealContext;

MandelbrotParser.prototype.real = function() {

    var localctx = new RealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, MandelbrotParser.RULE_real);
    var _la = 0; // Token type
    try {
        this.state = 481;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__22:
        case MandelbrotParser.RATIONAL:
        case MandelbrotParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 476;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 475;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 478;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        case MandelbrotParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 479;
            this.match(MandelbrotParser.T__23);
            this.state = 480;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComplexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_complex;
    this.r = null; // Token
    this.i = null; // Token
    this.rn = null; // RealContext
    return this;
}

ComplexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexContext.prototype.constructor = ComplexContext;

ComplexContext.prototype.RATIONAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MandelbrotParser.RATIONAL);
    } else {
        return this.getToken(MandelbrotParser.RATIONAL, i);
    }
};


ComplexContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MandelbrotParser.INTEGER);
    } else {
        return this.getToken(MandelbrotParser.INTEGER, i);
    }
};


ComplexContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

ComplexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterComplex(this);
	}
};

ComplexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitComplex(this);
	}
};




MandelbrotParser.ComplexContext = ComplexContext;

MandelbrotParser.prototype.complex = function() {

    var localctx = new ComplexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, MandelbrotParser.RULE_complex);
    var _la = 0; // Token type
    try {
        this.state = 552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 483;
            this.match(MandelbrotParser.T__11);
            this.state = 485;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 484;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 487;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 488;
            this.match(MandelbrotParser.T__3);
            this.state = 490;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 489;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 492;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 493;
            this.match(MandelbrotParser.T__12);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 494;
            this.match(MandelbrotParser.T__11);
            this.state = 496;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 495;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 498;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 499;
            this.match(MandelbrotParser.T__3);
            this.state = 500;
            this.match(MandelbrotParser.T__23);
            this.state = 501;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 502;
            this.match(MandelbrotParser.T__12);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 503;
            this.match(MandelbrotParser.T__11);
            this.state = 504;
            this.match(MandelbrotParser.T__23);
            this.state = 505;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 506;
            this.match(MandelbrotParser.T__3);
            this.state = 508;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 507;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 510;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 511;
            this.match(MandelbrotParser.T__12);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 512;
            this.match(MandelbrotParser.T__11);
            this.state = 513;
            this.match(MandelbrotParser.T__23);
            this.state = 514;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 515;
            this.match(MandelbrotParser.T__3);
            this.state = 516;
            this.match(MandelbrotParser.T__23);
            this.state = 517;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 518;
            this.match(MandelbrotParser.T__12);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 520;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 519;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 522;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 523;
            this.match(MandelbrotParser.T__22);
            this.state = 524;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 525;
            this.match(MandelbrotParser.T__25);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 527;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 526;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 529;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 530;
            this.match(MandelbrotParser.T__23);
            this.state = 531;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 532;
            this.match(MandelbrotParser.T__25);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 534;
            _la = this._input.LA(1);
            if(_la===MandelbrotParser.T__22) {
                this.state = 533;
                this.match(MandelbrotParser.T__22);
            }

            this.state = 536;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 537;
            this.match(MandelbrotParser.T__25);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 538;
            this.match(MandelbrotParser.T__23);
            this.state = 539;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 540;
            this.match(MandelbrotParser.T__22);
            this.state = 541;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 542;
            this.match(MandelbrotParser.T__25);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 543;
            this.match(MandelbrotParser.T__23);
            this.state = 544;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 545;
            this.match(MandelbrotParser.T__23);
            this.state = 546;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 547;
            this.match(MandelbrotParser.T__25);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 548;
            this.match(MandelbrotParser.T__23);
            this.state = 549;
            localctx.i = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.i = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 550;
            this.match(MandelbrotParser.T__25);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 551;
            localctx.rn = this.real();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PaletteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_palette;
    this.p = null; // Token
    this.v = null; // Token
    return this;
}

PaletteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PaletteContext.prototype.constructor = PaletteContext;

PaletteContext.prototype.PALETTE = function() {
    return this.getToken(MandelbrotParser.PALETTE, 0);
};

PaletteContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

PaletteContext.prototype.paletteelement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PaletteelementContext);
    } else {
        return this.getTypedRuleContext(PaletteelementContext,i);
    }
};

PaletteContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterPalette(this);
	}
};

PaletteContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitPalette(this);
	}
};




MandelbrotParser.PaletteContext = PaletteContext;

MandelbrotParser.prototype.palette = function() {

    var localctx = new PaletteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, MandelbrotParser.RULE_palette);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        localctx.p = this.match(MandelbrotParser.PALETTE);
        this.state = 555;
        localctx.v = this.match(MandelbrotParser.VARIABLE);
        this.state = 556;
        this.match(MandelbrotParser.T__0);
        this.state = 558; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 557;
            this.paletteelement();
            this.state = 560; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MandelbrotParser.T__2);
        this.state = 562;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PaletteelementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_paletteelement;
    this.t = null; // Token
    this.bc = null; // ColorargbContext
    this.ec = null; // ColorargbContext
    this.s = null; // Token
    this.e = null; // ExpressionContext
    return this;
}

PaletteelementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PaletteelementContext.prototype.constructor = PaletteelementContext;

PaletteelementContext.prototype.colorargb = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColorargbContext);
    } else {
        return this.getTypedRuleContext(ColorargbContext,i);
    }
};

PaletteelementContext.prototype.INTEGER = function() {
    return this.getToken(MandelbrotParser.INTEGER, 0);
};

PaletteelementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PaletteelementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterPaletteelement(this);
	}
};

PaletteelementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitPaletteelement(this);
	}
};




MandelbrotParser.PaletteelementContext = PaletteelementContext;

MandelbrotParser.prototype.paletteelement = function() {

    var localctx = new PaletteelementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, MandelbrotParser.RULE_paletteelement);
    try {
        this.state = 584;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 564;
            localctx.t = this.match(MandelbrotParser.T__2);
            this.state = 565;
            localctx.bc = this.colorargb();
            this.state = 566;
            this.match(MandelbrotParser.T__12);
            this.state = 567;
            localctx.ec = this.colorargb();
            this.state = 568;
            this.match(MandelbrotParser.T__3);
            this.state = 569;
            localctx.s = this.match(MandelbrotParser.INTEGER);
            this.state = 570;
            this.match(MandelbrotParser.T__3);
            this.state = 571;
            localctx.e = this.expression(0);
            this.state = 572;
            this.match(MandelbrotParser.T__4);
            this.state = 573;
            this.match(MandelbrotParser.T__7);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 575;
            localctx.t = this.match(MandelbrotParser.T__2);
            this.state = 576;
            localctx.bc = this.colorargb();
            this.state = 577;
            this.match(MandelbrotParser.T__12);
            this.state = 578;
            localctx.ec = this.colorargb();
            this.state = 579;
            this.match(MandelbrotParser.T__3);
            this.state = 580;
            localctx.s = this.match(MandelbrotParser.INTEGER);
            this.state = 581;
            this.match(MandelbrotParser.T__4);
            this.state = 582;
            this.match(MandelbrotParser.T__7);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColorinitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_colorinit;
    this.i = null; // Token
    return this;
}

ColorinitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorinitContext.prototype.constructor = ColorinitContext;

ColorinitContext.prototype.colorstatement = function() {
    return this.getTypedRuleContext(ColorstatementContext,0);
};

ColorinitContext.prototype.INIT = function() {
    return this.getToken(MandelbrotParser.INIT, 0);
};

ColorinitContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColorinit(this);
	}
};

ColorinitContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColorinit(this);
	}
};




MandelbrotParser.ColorinitContext = ColorinitContext;

MandelbrotParser.prototype.colorinit = function() {

    var localctx = new ColorinitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, MandelbrotParser.RULE_colorinit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        localctx.i = this.match(MandelbrotParser.INIT);
        this.state = 587;
        this.match(MandelbrotParser.T__0);
        this.state = 588;
        this.colorstatement();
        this.state = 589;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColorstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_colorstatement;
    return this;
}

ColorstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorstatementContext.prototype.constructor = ColorstatementContext;

ColorstatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ColorstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColorstatement(this);
	}
};

ColorstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColorstatement(this);
	}
};




MandelbrotParser.ColorstatementContext = ColorstatementContext;

MandelbrotParser.prototype.colorstatement = function() {

    var localctx = new ColorstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, MandelbrotParser.RULE_colorstatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (MandelbrotParser.IF - 65)) | (1 << (MandelbrotParser.STOP - 65)) | (1 << (MandelbrotParser.VARIABLE - 65)))) !== 0)) {
            this.state = 591;
            this.statement();
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColorruleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_colorrule;
    this.t = null; // Token
    this.r = null; // RuleexpContext
    this.o = null; // Token
    this.c = null; // ColorexpContext
    return this;
}

ColorruleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorruleContext.prototype.constructor = ColorruleContext;

ColorruleContext.prototype.RULE = function() {
    return this.getToken(MandelbrotParser.RULE, 0);
};

ColorruleContext.prototype.ruleexp = function() {
    return this.getTypedRuleContext(RuleexpContext,0);
};

ColorruleContext.prototype.colorexp = function() {
    return this.getTypedRuleContext(ColorexpContext,0);
};

ColorruleContext.prototype.RATIONAL = function() {
    return this.getToken(MandelbrotParser.RATIONAL, 0);
};

ColorruleContext.prototype.INTEGER = function() {
    return this.getToken(MandelbrotParser.INTEGER, 0);
};

ColorruleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColorrule(this);
	}
};

ColorruleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColorrule(this);
	}
};




MandelbrotParser.ColorruleContext = ColorruleContext;

MandelbrotParser.prototype.colorrule = function() {

    var localctx = new ColorruleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, MandelbrotParser.RULE_colorrule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        localctx.t = this.match(MandelbrotParser.RULE);
        this.state = 598;
        this.match(MandelbrotParser.T__5);
        this.state = 599;
        localctx.r = this.ruleexp(0);
        this.state = 600;
        this.match(MandelbrotParser.T__6);
        this.state = 601;
        this.match(MandelbrotParser.T__2);
        this.state = 602;
        localctx.o = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
            localctx.o = this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 603;
        this.match(MandelbrotParser.T__4);
        this.state = 604;
        this.match(MandelbrotParser.T__0);
        this.state = 605;
        localctx.c = this.colorexp();
        this.state = 606;
        this.match(MandelbrotParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RuleexpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_ruleexp;
    this.r1 = null; // RuleexpContext
    this.e1 = null; // ExpressionContext
    this.o = null; // Token
    this.e2 = null; // ExpressionContext
    this.r2 = null; // RuleexpContext
    return this;
}

RuleexpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuleexpContext.prototype.constructor = RuleexpContext;

RuleexpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RuleexpContext.prototype.ruleexp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RuleexpContext);
    } else {
        return this.getTypedRuleContext(RuleexpContext,i);
    }
};

RuleexpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterRuleexp(this);
	}
};

RuleexpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitRuleexp(this);
	}
};



MandelbrotParser.prototype.ruleexp = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RuleexpContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, MandelbrotParser.RULE_ruleexp, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        localctx.e1 = this.expression(0);
        this.state = 610;
        localctx.o = this._input.LT(1);
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MandelbrotParser.T__8) | (1 << MandelbrotParser.T__11) | (1 << MandelbrotParser.T__12) | (1 << MandelbrotParser.T__13) | (1 << MandelbrotParser.T__14) | (1 << MandelbrotParser.T__15))) !== 0))) {
            localctx.o = this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 611;
        localctx.e2 = this.expression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 618;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new RuleexpContext(this, _parentctx, _parentState);
                localctx.r1 = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, MandelbrotParser.RULE_ruleexp);
                this.state = 613;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 614;
                localctx.o = this._input.LT(1);
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MandelbrotParser.T__18) | (1 << MandelbrotParser.T__19) | (1 << MandelbrotParser.T__20))) !== 0))) {
                    localctx.o = this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 615;
                localctx.r2 = this.ruleexp(2); 
            }
            this.state = 620;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ColorexpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_colorexp;
    this.e1 = null; // ExpressionContext
    this.e2 = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.e4 = null; // ExpressionContext
    this.v = null; // Token
    this.e = null; // ExpressionContext
    return this;
}

ColorexpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorexpContext.prototype.constructor = ColorexpContext;

ColorexpContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ColorexpContext.prototype.VARIABLE = function() {
    return this.getToken(MandelbrotParser.VARIABLE, 0);
};

ColorexpContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColorexp(this);
	}
};

ColorexpContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColorexp(this);
	}
};




MandelbrotParser.ColorexpContext = ColorexpContext;

MandelbrotParser.prototype.colorexp = function() {

    var localctx = new ColorexpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, MandelbrotParser.RULE_colorexp);
    try {
        this.state = 641;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 621;
            localctx.e1 = this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 622;
            localctx.e1 = this.expression(0);
            this.state = 623;
            this.match(MandelbrotParser.T__3);
            this.state = 624;
            localctx.e2 = this.expression(0);
            this.state = 625;
            this.match(MandelbrotParser.T__3);
            this.state = 626;
            localctx.e3 = this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 628;
            localctx.e1 = this.expression(0);
            this.state = 629;
            this.match(MandelbrotParser.T__3);
            this.state = 630;
            localctx.e2 = this.expression(0);
            this.state = 631;
            this.match(MandelbrotParser.T__3);
            this.state = 632;
            localctx.e3 = this.expression(0);
            this.state = 633;
            this.match(MandelbrotParser.T__3);
            this.state = 634;
            localctx.e4 = this.expression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 636;
            localctx.v = this.match(MandelbrotParser.VARIABLE);
            this.state = 637;
            this.match(MandelbrotParser.T__2);
            this.state = 638;
            localctx.e = this.expression(0);
            this.state = 639;
            this.match(MandelbrotParser.T__4);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColorargbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_colorargb;
    this.a = null; // Token
    this.r = null; // Token
    this.g = null; // Token
    this.b = null; // Token
    this.argb32 = null; // Token
    this.argb24 = null; // Token
    return this;
}

ColorargbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColorargbContext.prototype.constructor = ColorargbContext;

ColorargbContext.prototype.RATIONAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MandelbrotParser.RATIONAL);
    } else {
        return this.getToken(MandelbrotParser.RATIONAL, i);
    }
};


ColorargbContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MandelbrotParser.INTEGER);
    } else {
        return this.getToken(MandelbrotParser.INTEGER, i);
    }
};


ColorargbContext.prototype.ARGB32 = function() {
    return this.getToken(MandelbrotParser.ARGB32, 0);
};

ColorargbContext.prototype.ARGB24 = function() {
    return this.getToken(MandelbrotParser.ARGB24, 0);
};

ColorargbContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterColorargb(this);
	}
};

ColorargbContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitColorargb(this);
	}
};




MandelbrotParser.ColorargbContext = ColorargbContext;

MandelbrotParser.prototype.colorargb = function() {

    var localctx = new ColorargbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, MandelbrotParser.RULE_colorargb);
    var _la = 0; // Token type
    try {
        this.state = 654;
        switch(this._input.LA(1)) {
        case MandelbrotParser.T__5:
            this.enterOuterAlt(localctx, 1);
            this.state = 643;
            this.match(MandelbrotParser.T__5);
            this.state = 644;
            localctx.a = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.a = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 645;
            this.match(MandelbrotParser.T__3);
            this.state = 646;
            localctx.r = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.r = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 647;
            this.match(MandelbrotParser.T__3);
            this.state = 648;
            localctx.g = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.g = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 649;
            this.match(MandelbrotParser.T__3);
            this.state = 650;
            localctx.b = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MandelbrotParser.RATIONAL || _la===MandelbrotParser.INTEGER)) {
                localctx.b = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 651;
            this.match(MandelbrotParser.T__6);
            break;
        case MandelbrotParser.ARGB32:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            localctx.argb32 = this.match(MandelbrotParser.ARGB32);
            break;
        case MandelbrotParser.ARGB24:
            this.enterOuterAlt(localctx, 3);
            this.state = 653;
            localctx.argb24 = this.match(MandelbrotParser.ARGB24);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EofContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MandelbrotParser.RULE_eof;
    return this;
}

EofContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EofContext.prototype.constructor = EofContext;

EofContext.prototype.EOF = function() {
    return this.getToken(MandelbrotParser.EOF, 0);
};

EofContext.prototype.enterRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.enterEof(this);
	}
};

EofContext.prototype.exitRule = function(listener) {
    if(listener instanceof MandelbrotListener ) {
        listener.exitEof(this);
	}
};




MandelbrotParser.EofContext = EofContext;

MandelbrotParser.prototype.eof = function() {

    var localctx = new EofContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, MandelbrotParser.RULE_eof);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.match(MandelbrotParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


MandelbrotParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 13:
			return this.statevariablelist_sempred(localctx, predIndex);
	case 15:
			return this.conditionexp_sempred(localctx, predIndex);
	case 16:
			return this.conditionexp2_sempred(localctx, predIndex);
	case 17:
			return this.conditionexp3_sempred(localctx, predIndex);
	case 20:
			return this.expression_sempred(localctx, predIndex);
	case 21:
			return this.expression2_sempred(localctx, predIndex);
	case 22:
			return this.expression3_sempred(localctx, predIndex);
	case 23:
			return this.expression4_sempred(localctx, predIndex);
	case 34:
			return this.ruleexp_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

MandelbrotParser.prototype.statevariablelist_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.conditionexp_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.conditionexp2_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.conditionexp3_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.expression2_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 5);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.expression3_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.expression4_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MandelbrotParser.prototype.ruleexp_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.MandelbrotParser = MandelbrotParser;
